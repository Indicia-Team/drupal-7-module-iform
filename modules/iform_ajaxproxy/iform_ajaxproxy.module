<?php

/**
 * @file
 * Proxy module for writes to Indicia warehouse.
 *
 * Adds write authentication to Inidica Ajax accesses, and wraps the post into
 * the required format.
 *
 * @package iform_ajaxproxy
 */

define('IFORM_AJAXPROXY_PATH', variable_get('iform_ajaxproxy_path', 'ajaxproxy'));

/* -----------------------------------------------------------------
  Hook Implementations
------------------------------------------------------------------ */

/**
 * Implements hook_permission().
 */
function iform_ajaxproxy_permission() {
  return array(
    'IForm AJAX Proxy passthrough' => array(
      'title' => t('IForm AJAX Proxy passthrough'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function iform_ajaxproxy_menu() {
  $items = array();

  $items[IFORM_AJAXPROXY_PATH] = array(
    'title' => 'Redirecting to your destination',
    'page callback' => 'iform_ajaxproxy_proxy',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/* -----------------------------------------------------------------
 Public API
------------------------------------------------------------------ */

/**
 * Provide a URL to be used for AJAX requests.
 *
 * @param int $nid
 *   Node ID.
 * @param integer|string $index
 *   Array index used to define how to process the post into an indicia format.
 *
 * @return string
 *   A ready to be used url.
 *
 * @see iform_proxy_redirect()
 */
function iform_ajaxproxy_url($nid, $index) {
  return url(
    IFORM_AJAXPROXY_PATH,
    array(
      'absolute' => TRUE,
      'query' => array(
        'node' => empty($nid) ? '' : $nid,
        'index' => $index,
      ),
    )
  );
}

/**
 * Constructs proxy redirection based on the iform node.
 *
 * This is the function called when a request comes through the proxy.
 */
function iform_ajaxproxy_proxy() {
  iform_load_helpers(array('data_entry_helper'));

  global $user;
  $error = FALSE;
  // Not a proxied path.
  if (arg(0) != IFORM_AJAXPROXY_PATH) {
    $error = t("proxy path mismatch");
  }
  elseif (!user_access('IForm AJAX Proxy passthrough')) {
    if ($user->uid == 0) {
      $error = t("Currently not logged in, and does not have permission to save data via the proxy.");
    }
    else {
      $error = t("User does not have permission to save data via the proxy.");
    }
  }
  elseif (!$_POST) {
    $error = t("no POST data.");
  }
  else {
    $nid = isset($_GET['node']) ? $_GET['node'] : NULL;
    $index = isset($_GET['index']) ? $_GET['index'] : NULL;
    // Sanity check.
    if (empty($index)) {
      $error = t("invocation format problem - no data format indicator.");
    }
    else {
      if (empty($nid)) {
        $conn = array(
          'website_id' => variable_get('indicia_website_id', ''),
          'password' => variable_get('indicia_password', '')
        );
      }
      else {
        $node = node_load($nid);
        $conn = iform_get_connection_details($node);
        if ($node->type != 'iform') {
          $error = t("Drupal node is not an iform node.");
        }
      }
      // Form type is held in $node->iform, but not relevant at this point.
      //    require_once drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/'.$node->iform.'.php';
      $postargs = "website_id=" . $conn['website_id'];
      $response = data_entry_helper::http_post(data_entry_helper::$base_url . '/index.php/services/security/get_nonce', $postargs, false);
      $nonce = $response['output'];
      if (!array_key_exists('website_id', $_POST)) {
        $error = t("Indicia website_id not provided in POST.");
      }
      elseif ($_POST['website_id'] != $conn['website_id']) {
        $error = t("Indicia website_id in POST does not match the stored website ID.");
      }
    }
  }
  if ($error) {
    echo "{error:\"iform_ajaxproxy Error: $error\"}";
    return;
  }
  $writeTokens = array('nonce' => $nonce, 'auth_token' => sha1($nonce . ":" . $conn['password']));
  if ($index === 'single_verify') {
    iform_ajaxproxy_single_verify($writeTokens);
  }
  elseif ($index === 'single_verify_sample') {
    iform_ajaxproxy_single_verify($writeTokens, 'single_verify_sample');
  }
  else {
    switch ($index) {
      case "sample":
        $model = data_entry_helper::wrap_with_attrs($_POST, 'sample');
        break;

      case "location":
        $structure = array(
          'model' => 'location'
        );
        // Only include website if in post data.
        if (array_key_exists('locations_website:website_id', $_POST)) {
          $structure['subModels']['locations_website'] = array('fk' => 'location_id');
        }
        $model = data_entry_helper::build_submission($_POST, $structure);
        break;

      case "loc-sample":
        $structure = array(
          'model' => 'location',
          'subModels' => array(
            'sample' => array('fk' => 'location_id'),
          ),
        );
        if (array_key_exists('locations_website:website_id', $_POST)) {
          $structure['subModels']['locations_website'] = array('fk' => 'location_id');
        }
        $model = data_entry_helper::build_submission($_POST, $structure);
        break;

      case "loc-smp-occ":
        $structure = array(
          'model' => 'sample',
          'subModels' => array(
              'occurrence' => array('fk' => 'sample_id')
          ),
          'superModels' => array(
              'location' => array('fk' => 'location_id')
          ),
        );
        $model = data_entry_helper::build_submission($_POST, $structure);
        if (array_key_exists('locations_website:website_id', $_POST)) {
          if (isset($model['superModels'][0]['model']['subModels'])) {
            $model['superModels'][0]['model']['subModels'] = array();
          }
          $model['superModels'][0]['model']['subModels'][] = array(
            'fkId' => 'location_id',
            'model' => array(
              'id' => 'locations_website',
              'fields' => array(
                'website_id' => array('value' => $_POST['locations_website:website_id'])
              ),
            ),
          );
        }
        foreach ($_POST as $key => $value) {
          if (substr($key, 0, 14) === 'determination:') {
            $model['subModels'][0]['model']['subModels'][] = array(
            'fkId' => 'occurrence_id',
            'model' => data_entry_helper::wrap($_POST, 'determination', 'determination')
            );
            break;
          }
        }
        break;

      case "smp-occ":
        $structure = array(
          'model' => 'sample',
          'subModels' => array(
            'occurrence' => array('fk' => 'sample_id'),
          ),
        );
        $model = data_entry_helper::build_submission($_POST, $structure);
        break;

      case "media":
        // Media handled differently. Submission is handled by the handle_media function.
        // Hardcode the auth into the $_Post array
        $_POST['auth_token'] = sha1($nonce . ":" . $conn['password']);
        $_POST['nonce'] = $nonce;
        $media_id = 'upload_file';
        // At the moment this only needs to handle a single media file at a time.
        if (array_key_exists($media_id, $_FILES)) {
          // There is a single upload field.
          if ($_FILES[$media_id]['name'] != '') {
            // That field has a file.
            $file = $_FILES[$media_id];
            $return = array();
            $uploadpath = helper_config::$upload_path;
            $target_url = helper_config::$base_url . "/index.php/services/data/handle_media";
            $name = $file['name'];
            $fname = $file['tmp_name'];
            $parts = explode(".", $name);
            $fext = array_pop($parts);
            // Generate a file id to store the image as.
            $destination = time() . str_pad((string) rand(0, 999), 3, '0', STR_PAD_LEFT) . "." . $fext;
            // If successfully stored locally - send to the warehouse.
            if (move_uploaded_file($fname, $uploadpath . $destination)) {
              // we've done the time etc thing, so server doesn't need to.
              $postargs = array('name_is_guid' => 'true');
              if (array_key_exists('auth_token', $_POST)) {
                $postargs['auth_token'] = $_POST['auth_token'];
              }
              if (array_key_exists('nonce', $_POST)) {
                $postargs['nonce'] = $_POST['nonce'];
              }
              $file_to_upload = array('media_upload' => '@' . realpath($uploadpath . $destination));
              $response = data_entry_helper::http_post($target_url, $file_to_upload + $postargs);
              $output = json_decode($response['output'], TRUE);
              if (is_array($output)) {
                // An array signals an error - attach the errors to the control that caused them.
                if (array_key_exists('error', $output)) {
                  $return['error'] = $output['error'];
                  if (array_key_exists('errors', $output)) {
                    $return['errors'][$media_id] = $output['errors']['media_upload'];
                  }
                }
              }
              else {
                // Filenames are returned without structure - the output of json_decode may not be valid.
                $exif = exif_read_data($uploadpath . $destination, 0, tTRUErue);
                if (!is_array($exif) || !isset($exif["IFD0"]) || !is_array($exif["IFD0"])) {
                  $exif = array("IFD0" => array());
                }
                if (!isset($exif["IFD0"]["Make"])) {
                  $exif["IFD0"]["Make"] = '';
                }
                if (!isset($exif["IFD0"]["Model"])) {
                  $exif["IFD0"]["Model"] = '';
                }
                if (!isset($exif["IFD0"]["DateTime"])) {
                  $exif["IFD0"]["DateTime"] = '';
                }
                $return['files'][] = array(
                  'filename' => $response['output'],
                  'EXIF_Camera_Make' => $exif["IFD0"]["Make"] . ' ' . $exif["IFD0"]["Model"],
                  'EXIF_DateTime' => $exif["IFD0"]["DateTime"],
                );
              }
              // Remove local copy.
              unlink($uploadpath . $destination);
            }
            else {
              // Attach the errors to the control that caused them.
              $return['error'] = 'iform_ajaxproxy Error: Upload error';
              $return['errors'][$media_id] = 'Sorry, there was a problem uploading this file - move failed.';
            }
          }
          else {
            // Attach the errors to the control that caused them.
            $return['error'] = 'iform_ajaxproxy Error: Upload error';
            $return['errors'][$media_id] = 'Sorry, no file present for "' . $media_id . '".';
          }
        }
        else {
          $return['error'] = 'iform_ajaxproxy Error: Upload error';
          $return['errors'][$media_id] = 'Sorry, "' . $media_id . '" not present in _FILES.';
        }
        // If no errors in the response array, all went well.
        $return['success'] = !(array_key_exists('error', $return) || array_key_exists('errors', $return));
        echo json_encode($return);
        return;

      case "occurrence":
        $structure = array('model' => 'occurrence');
        // Only include determination or comment record if determination in
        // post.
        foreach ($_POST as $key => $value) {
          if (substr($key, 0, 14) == 'determination:') {
            $structure['subModels'] = array('determination' => array('fk' => 'occurrence_id'));
            break;
          }
          elseif (substr($key, 0, 19) == 'occurrence_comment:') {
            $structure['subModels'] = array('occurrence_comment' => array('fk' => 'occurrence_id'));
            break;
          }
        }
        $model = data_entry_helper::build_submission($_POST, $structure);
        break;

      case "occ-comment":
        $model = data_entry_helper::wrap($_POST, 'occurrence_comment');
        break;

      case "smp-comment":
        $model = data_entry_helper::wrap($_POST, 'sample_comment');
        break;

      case "determination":
        $model = data_entry_helper::wrap($_POST, 'determination');
        break;

      case "notification":
        $model = data_entry_helper::wrap($_POST, 'notification');
        break;

      case "user-trust":
        $structure = array('model' => 'user_trust');
        $model = data_entry_helper::build_submission($_POST, $structure);
        break;

      case "sample_attribute_value":
        $model = data_entry_helper::wrap($_POST, 'sample_attribute_value');
        break;

      case "location_attribute_value":
        $model = data_entry_helper::wrap($_POST, 'location_attribute_value');
        break;

      case "person_attribute_value":
        $model = data_entry_helper::wrap($_POST, 'person_attribute_value');
        break;

      case "filter":
        $model = data_entry_helper::wrap($_POST, 'filter');
        break;

      case "filter_and_user":
        $structure = array('model' => 'filter', 'subModels' => array('filters_user' => array('fk' => 'filter_id')));
        $model = data_entry_helper::build_submission($_POST, $structure);
        break;

      case "groups_location":
        $model = data_entry_helper::wrap($_POST, 'groups_location');
        break;

      case "groups_user":
        $model = data_entry_helper::wrap($_POST, 'groups_user');
        break;

      default:
        echo "{error:\"iform_ajaxproxy Error: Current defined methods are: sample, location, loc-sample, " .
          "loc-smp-occ, smp-occ, media, occurrence, occ-comment, smp-comment, determination, notification, " .
          "user-trust, person_attribute_value, sample_attribute_value, location_attribute_value\"}";
        // @todo invoke optional method in relevant iform prebuilt form to
        // handle non-standard indexes
        // @todo echo a failure response: invalid index type?
        return;
    }
    // Pass through the user ID as this can then be used to set created_by and
    // updated_by_ids.
    if (isset($_REQUEST['user_id'])) {
      $writeTokens['user_id'] = $_REQUEST['user_id'];
    }
    if (isset($_REQUEST['sharing'])) {
      $writeTokens['sharing'] = $_REQUEST['sharing'];
    }
    $response = data_entry_helper::forward_post_to('save', $model, $writeTokens);
    // If it is not json format, assume error text, and json encode that.
    // if (!json_decode($output, true))
    //    $response = "{error:\"".$output."\"}";
    // possible:
    echo json_encode($response);
  }
}

/**
 * Special case handler for the single_verify method.
 *
 * Tthis goes to the data_utils service for performance reasons.
 */
function iform_ajaxproxy_single_verify($writeTokens, $method = 'single_verify') {
  $request = data_entry_helper::$base_url . "index.php/services/data_utils/$method";
  $postargs = data_entry_helper::array_to_query_string(array_merge($_POST, $writeTokens), TRUE);
  $response = data_entry_helper::http_post($request, $postargs);
  // The response should be in JSON if it worked.
  $output = json_decode($response['output'], TRUE);
  // If this is not JSON, it is an error, so just return it as is.
  if (!$output) {
    echo $response['output'];
  }
  else {
    echo print_r($response, TRUE);
  }

}
