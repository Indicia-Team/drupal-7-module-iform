<?php
/**
 * Indicia, the OPAL Online Recording Toolkit.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/gpl.html.
 *
 * @package	Client
 * @author	Indicia Team
 * @license	http://www.gnu.org/licenses/gpl.html GPL 3.0
 * @link 	http://code.google.com/p/indicia/
 */

/**
 * Link in other required php files.
 */
require_once('lang/default.php');

/**
 * Class providing static functions to obtain localised or customised terms for use
 * in output generated by the data_entry_helper class.
 * By default, retrieves terms from the lang/default.php file, unless a custom terms
 * file has been linked to the PHP page which overrides the requested term.
 *
 * @package	Client
 */
class lang {

  /**
   * Static function to obtain a customised or localised term.
   *
   * @param string $key Key identifying the term to get.
   * @param string Any other parameters are treated as replacements for tags marked {1}, {2} etc in the language string.
   * These replacements should be already utf8 encoded.
   */
  public static function get($key) {
    global $default_terms;
    global $custom_terms;
    $output='';
    if (isset($custom_terms)) {
      if (array_key_exists($key, $custom_terms)) {
        $output=$custom_terms[$key];
      }
    }
    if ($output=='' && array_key_exists($key, $default_terms)) {
      // use default term if no custom terms, or absent from custom term list
      $output=$default_terms[$key];
    } elseif ($output=='') {
      // no translation, so use original requested key
      $output=$key;
    }
    // Now do any replacements using any additional function arguments
    $args = func_get_args();
    if (count($args)>1) {
      // get rid of the first argument, it is the language string key
      array_shift($args);
      // build a set of replacements
      $argkeys = array();
      foreach($args as $arg) {
        $argkeys[] = '/\{'.(count($argkeys)+1).'\}/';
      }      
      // replace the replacements with the function argument list
      $output = preg_replace($argkeys, $args, $output);
      
    }
    return $output;
  }

}