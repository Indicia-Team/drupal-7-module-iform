<?php
/**
 * Indicia, the OPAL Online Recording Toolkit.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/gpl.html.
 *
 * @package	Client
 * @subpackage PrebuiltForms
 * @author	Indicia Team
 * @license	http://www.gnu.org/licenses/gpl.html GPL 3.0
 * @link 	http://code.google.com/p/indicia/
 */
/*
 * Options: includeParentLookUp
 * 			loctoolsLocTypeID
 * 			usePolygons
 * 			includeLocationComment
 * 			includeLocationCode
 * 
 * TBD extend sref_system so can choose from drop down if > 1, else set to configured value.
 * TBD Convert locModTool to AJAX: return to locations page after saving
 * TBD put in check to enforce ParentLocationType and LocationType in options, loctools set?
 * TBD put in check to prevent/confirm selecting something else when existing selection is modified (will lose changes?).
 * TBD attributes to handle checkboxes, inc booleans.
 * TBD put in check to ensure at least 1 geometry specified.
 * TBD Add zoom to commune: display boundary on map, restrict displayed sites to those in commune.
 * TBD Add control to undo changes to existing locations.
 * TBD Hide buttons that can't be used.
 * 
 * The location centroid sref will contain the central point of the geom.
 * cant restrict location_attribute_values fetch in populateExtensions to location IDs in this square as this uses GET params: too small!
 */


function iform_mnhnl_getParameters() {
  return
      array(
        array(
          'name'=>'locationMode',
          'caption'=>'Location Mode',
          'description'=>'Describes the main method of handling locations',
          'type'=>'select',
          'options' => array(
            'single' => 'Simple site choice, no parent locations',
            'filtered' => 'Filtered site choice',
            'parent' => 'Single site chosen using a Parent location',
            'multi' => 'Multiple sites (under a parent Location) processed at the same time.'
          ),
          'default' => 'single',
          'group' => 'Locations'
        ),
        array(
          'name'=>'filterAttrs',
          'caption'=>'Filter Attributes',
          'description'=>'A comma separated list of attributes (id or untranslated caption) which will be used to filter the locations.',
          'type'=>'string',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'adminsCanCreate',
          'caption'=>'Admins can create sites',
          'description'=>'Choose whether Admin users can create sites within the Sites tab.',
          'type'=>'boolean',
          'default' => false,
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'usePoints',
          'caption'=>'Location Points',
          'description'=>'Describes type of Points to be included when creating a location generated by form',
          'type'=>'select',
          'options' => array(
            'none' => 'None',
            'single' => 'Single',
            'multi' => 'Multiple'
          ),
          'default' => 'single',
          'group' => 'Locations'
        ),
        array(
          'name'=>'useLines',
          'caption'=>'Location Lines',
          'description'=>'Describes type of Lines to be included when creating a location generated by form',
          'type'=>'select',
          'options' => array(
            'none' => 'None',
            'single' => 'Single',
            'multi' => 'Multiple'
          ),
          'default' => 'none',
          'group' => 'Locations'
        ),
        array(
          'name'=>'usePolygons',
          'caption'=>'Location Polygons',
          'description'=>'Describes type of Polygons to be included when creating a location generated by form',
          'type'=>'select',
          'options' => array(
            'none' => 'None',
            'single' => 'Single',
            'multi' => 'Multiple'
          ),
          'default' => 'none',
          'group' => 'Locations'
        ),
        array(
          'name'=>'oneTypeAtATime',
          'caption'=>'Single Type Only',
          'description'=>'Choose whether to allow only one geometry type at a time: e.g. if above has points, lines, and polygons active, and this is selected, adding a point will remove any any lines or polygons.',
          'type'=>'boolean',
          'required' => false,
          'group' => 'Locations'
        ),
        // we use the locTools location type ID for the parent

        array(
          'name'=>'communeLayerLookup',
          'caption'=>'WFS Layer specification for Commune Lookup',
          'description'=>'Comma separated: proxiedurl,featurePrefix,featureType,geometryName,featureNS,srsName,propertyNames',
          'type'=>'string',
          'required' => false,
          'group'=>'Other Map Settings',
        ),
        array(
          'name'=>'communeLayerBuffer',
          'caption'=>'Commune Lookup Buffer',
          'description'=>'When the location position is not within a Commune, this is the size of the buffer to look outside the Coummune boundary in order to find the closest Commune to use instead.',
          'type'=>'int',
          'required' => false,
          'group'=>'Other Map Settings',
        ),
        array(
          'name'=>'locationLayerLookup',
          'caption'=>'WFS Layer specification for Locations Lookup',
          'description'=>'Comma separated: proxiedurl,featurePrefix,featureType,geometryName,featureNS,srsName,propertyNames',
          'type'=>'string',
          'required' => false,
          'group'=>'Other Map Settings',
        ),
        array(
          'name'=>'locationLayerWMS',
          'caption'=>'WMS Location Layer Definition',
          // e.g. http://localhost/geoserver/wms,indicia:nation2,2169,0,1000000,m
          'description'=>'Comma separated list of option definitions for the WMS location layer:  url(unproxied),layer,system,minScale,maxScale,units',
          'type'=>'string',
          'required' => false,
          'group'=>'Other Map Settings',
          'maxlength'=>200
        ),

      	// location type look up is now the standard 'indicia:location_types', not 'mnhnl:loctype'
        array(
          'name'=>'LocationTypeTerm',
          'caption'=>'Primary Site Location Type Term',
          'description'=>"Term used to provide the Location Type ID for new sites. For the non-parent location based mode, and when using Location Tools to assign locations to users, this is not needed as the 'Location Tools Location Type ID' is used instead.",
          'type'=>'string',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'SecondaryLocationTypeTerm',
          'caption'=>'2nd Site Location Type Term',
          'description'=>"Term used to provide the Location Type ID for sites. Exact functionality differences when using this compared to the Primary term is dependant on the form itself. When provided, an extra field is provided in the Mod Tool to allow admins the ability to change the Location Type.",
          'type'=>'string',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'includeLocationComment',
          'caption'=>'Location Comment',
          'description'=>'Choose whether to include the location comment in the list of fields which can be set.',
          'type'=>'boolean',
          'default' => true,
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'includeLocationCode',
          'caption'=>'Location Code',
          'description'=>'Choose whether to include the location code in the list of fields which can be modified by the Locations Modification Tool.',
          'type'=>'boolean',
          'default' => true,
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'autoGenSiteName',
          'caption'=>'Generate Site Name',
          'description'=>'Automatically generate the site name as an incremental number.',
          'type'=>'boolean',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'siteNameTermListID',
          'caption'=>'Site Name Termlist',
          'description'=>'Use this termlist ID for the site names. Omit to allow text entry.',
          'type'=>'int',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'extendLocationNameTemplate',
          'caption'=>'Site Names Template',
          'description'=>'Use this to generated the site names in selection drop down and on map. Use attribute captions surrounded by braces as strings to be replaced, also {name} and {code}. If not provided will default to location name.',
          'type'=>'string',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'duplicateNameCheck',
          'caption'=>'Duplicate name check',
          'description'=>'Duplicate name check',
          'type'=>'select',
       	  'options' => array(
       			'none' => 'None',
 				'check' => 'Warning only',
        		'enforce' => 'Enforce'
        		),
          'default' => 'check',
          'group' => 'Locations'
        ),
        array(
          'name'=>'zoomLevel',
          'caption'=>'Default zoom level',
          'description'=>'Default map zoom level for location modification tool when jumping to a site. 0 (zoomed out) to 19 (zoomed in). This is for the location modification tool, not the data entry location module - the zoom level for this needs to be set in the arguments to the map control in the user interface.',
          'type'=>'int',
          'default' => 15,
          'group' => 'Locations'
        ),
        array(
          'name'=>'includeNumSites',
          'caption'=>'Number of sites field',
          'description'=>'When a Parent is defined, choose whether to display a field giving a count of the number of sites in that parent.',
          'type'=>'boolean',
          'default' => false,
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'labelZoomLevel',
          'caption'=>'Label zoom level',
          'description'=>'Map zoom level at which site labels are displayed. 0 (zoomed out) to 19 (zoomed in). More zoomed out than this are labels are not displayed.',
          'type'=>'int',
          'default' => 12,
          'group' => 'Locations'
        ),
        array(
          'name'=>'labelAlign',
          'caption'=>'Label Alignment',
          'description'=>'When creating the label for the sites, this defines the label positioning as specified by the Openlayers.Feature.Vector.Style.',
          'type'=>'string',
          'default' => 'cm',
          'group' => 'Locations'
        ),
        array(
          'name'=>'labelXOffset',
          'caption'=>'Label X Offset',
          'description'=>'When creating the label for the sites, this defines the label positioning as specified by the Openlayers.Feature.Vector.Style.',
          'type'=>'int',
          'default' => '0',
          'group' => 'Locations'
        ),
        array(
          'name'=>'siteTabSplitAttrs',
          'caption'=>'Split Attributes Groups',
          'description'=>'In the Site Tab on the main sample list screen, you can split the attibutes into two groups determined by their allocations on the Warehouse. This field is a colon separated list of "tabname","class". The first entry is put before the spatial reference, the second after.<br />In the data entry part of the form this is controlled by the user interface field.',
          'type'=>'string',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'movePrecision',
          'caption'=>'Move Precision',
          'description'=>'When a precision attribute is included, choose whether to move it next to the X,Y coordinates.',
          'type'=>'boolean',
          'default' => true,
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name' => 'removeBreakLocAttrIDs',
          'caption' => 'Remove breaks',
          'description' => 'The Location Attributes to remove the line break after. This text field holds a colon separated list of Indicia attribute ids',
          'type' => 'string',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'shpFileDownloadURL',
          'caption'=>'Shape File URL',
          'description'=>'Proxied URL to use to access the geoserver to allow the download of the shape files.',
          'type'=>'string',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'shpFileFeaturePrefix',
          'caption'=>'Shape File Feature Prefix',
          'description'=>'Feature Prefix to use to access the geoserver to allow the download of the shape files.',
          'type'=>'string',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'shpDownloadPoints',
          'caption'=>'SHP Points',
          'description'=>'Force the availability of a SHP download for points, even if the users cant enter points: may be required to handle initial data. If the users can enter points, then the SHP points download will be available even if this is unchecked.',
          'type'=>'boolean',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'shpDownloadLines',
          'caption'=>'SHP Lines',
          'description'=>'Force the availability of a SHP download for lines, even if the users cant enter lines: may be required to handle initial data. If the users can enter lines, then the SHP lines download will be available even if this is unchecked.',
          'type'=>'boolean',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'shpDownloadPolygons',
          'caption'=>'SHP Polygons',
          'description'=>'Force the availability of a SHP download for polygons, even if the users cant enter polygons: may be required to handle initial data. If the users can enter polygons, then the SHP polygons download will be available even if this is unchecked.',
          'type'=>'boolean',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'mousePosControl',
          'caption'=>'Mouse Position',
          'description'=>'Choose whether to include a mouse position indicator on the map(s), in the toolbar.',
          'type'=>'boolean',
          'required' => false,
          'group' => 'Other Map Settings'
        )
      );
}
function iform_mnhnl_locModTool($auth, $args, $node) {
  global $indicia_templates;
  if (!isset($args['clientSideValidation']) || $args['clientSideValidation'])
      data_entry_helper::enable_validation('entry_form');
  if($args['locationMode']=='multi') $args['locationMode']='parent';
  data_entry_helper::$entity_to_load=array();
  $retVal = "<div id=\"locations\">";
  if($args['shpFileDownloadURL']!=""){
    $request= $args['shpFileDownloadURL']."/geoserver/wfs?request=GetFeature&service=wfs&version=1.0.0&outputformat=SHAPE-ZIP&srsName=EPSG:2169";
    if($args['LocationTypeTerm']=='' && isset($args['loctoolsLocTypeID'])) $args['LocationTypeTerm']=$args['loctoolsLocTypeID'];
    $primary = iform_mnhnl_getTermID($auth, 'indicia:location_types',$args['LocationTypeTerm']);
    $request.="&cql_filter=website_id=".$args['website_id']." AND ";
    if($args['SecondaryLocationTypeTerm'] != ''){
      $secondary = iform_mnhnl_getTermID($auth, 'indicia:location_types',$args['SecondaryLocationTypeTerm']);
      $request.="(type_id=".$primary."OR type_id=".$secondary.")";
    } else {
      $request.="type_id=".$primary;
    }
    $request .= "&typename=".$args['shpFileFeaturePrefix'].':';
    $filedetails = "&format_options=filename:".$args['reportFilenamePrefix'];
    $retValList = "";
    if($args['usePoints']!='none' || (isset($args['shpDownloadPoints']) && $args['shpDownloadPoints']))       $retValList .= "<a href=\"".$request."point_locations".$filedetails."_Points.zip\">".lang::get('Points')."</a>";
    if($args['useLines']!='none' || (isset($args['shpDownloadLines']) && $args['shpDownloadLines']))          $retValList .= ($retValList == "" ? "" : " : ")."<a href=\"".$request."line_locations".$filedetails."_Lines.zip\">".lang::get('Lines')."</a>";
    if($args['usePolygons']!='none' || (isset($args['shpDownloadPolygons']) && $args['shpDownloadPolygons'])) $retValList .= ($retValList == "" ? "" : " : ")."<a href=\"".$request."polygon_locations".$filedetails."_Polygons.zip\">".lang::get('Polygons')."</a>";
    $retVal .= "<fieldset><legend>".lang::get('LANG_SHP_Download_Legend')."</legend>
      <p>".lang::get('LANG_Shapefile_Download')." ".$retValList."</p></fieldset>";
  }
  $includeOutsideSquare = ($args['locationMode']=='parent'); // includes multi - see above
  // filtered
  if($args['locationMode']=='filtered'){
    $filterAttrs = explode(',',$args['filterAttrs']);
    foreach($filterAttrs as $idx=>$filterAttr){
      $filterAttr=explode(':',$filterAttr);
      if($filterAttr[0] == 'Parent' && $filterAttr[1] == "true")
        $includeOutsideSquare = true;
    }
  };

  if($includeOutsideSquare){
    $confirmedLocationTypeID = iform_mnhnl_getTermID($auth, 'indicia:location_types',$args['SecondaryLocationTypeTerm']);
    if(is_null($confirmedLocationTypeID)) $confirmedLocationTypeID="0";
    $submittedLocationTypeID = iform_mnhnl_getTermID($auth, 'indicia:location_types',$args['LocationTypeTerm']);
    $retVal .= "<fieldset><legend>".lang::get('LANG_Outside_Square_Reports')."</legend>
  	<form method='post' action='".data_entry_helper::$base_url.'/index.php/services/report/requestReport?report=reports_for_prebuilt_forms/MNHNL/luxbio_outside_squares_1.xml&reportSource=local&auth_token='.$auth['read']['auth_token'].'&nonce='.$auth['read']['nonce'].'&mode=csv&filename='.$args['reportFilenamePrefix']."CentreOutsideSquaresReport'>
      <label style='width:auto;'>".lang::get('LANG_Outside_Square_Download_1').":</label>
      <input type='hidden' name='params' value='{\"website_id\":".$args['website_id'].", \"survey_id\":".$args['survey_id'].", \"primary_loc_type_id\":".$submittedLocationTypeID.", \"secondary_loc_type_id\":".$confirmedLocationTypeID."}' />
      <input type='submit' class='ui-state-default ui-corner-all' value='".lang::get('Download')."'>
    </form>
  	<form method='post' action='".data_entry_helper::$base_url.'/index.php/services/report/requestReport?report=reports_for_prebuilt_forms/MNHNL/luxbio_outside_squares_2.xml&reportSource=local&auth_token='.$auth['read']['auth_token'].'&nonce='.$auth['read']['nonce'].'&mode=csv&filename='.$args['reportFilenamePrefix']."BoundaryCutsSquaresReport'>
      <label style='width:auto;'>".lang::get('LANG_Outside_Square_Download_2').":</label>
      <input type='hidden' name='params' value='{\"website_id\":".$args['website_id'].", \"survey_id\":".$args['survey_id'].", \"primary_loc_type_id\":".$submittedLocationTypeID.", \"secondary_loc_type_id\":".$confirmedLocationTypeID."}' />
      <input type='submit' class='ui-state-default ui-corner-all' value='".lang::get('Download')."'>
    </form>
    </fieldset>";
  	
  }
  $retVal .= "<form method=\"post\" id=\"entry_form\">".
          $auth['write'].
          "<input type=\"hidden\" id=\"source\" name=\"source\" value=\"iform_mnhnl_locModTool\" />".
          "<input type=\"hidden\" id=\"website_id\" name=\"website_id\" value=\"".$args['website_id']."\" />".
          "<input type=\"hidden\" id=\"survey_id\" name=\"survey_id\" value=\"".$args['survey_id']."\" />";
  $retVal .= iform_mnhnl_lux5kgridControl($auth, $args, $node, 
      array('Instructions2' => lang::get('LANG_LocModTool_Instructions2'),
       'MainFieldLabel' => lang::get('LANG_LocModTool_IDLabel'),
       'NameLabel' => lang::get('LANG_LocModTool_NameLabel'),
       'ParentLabel' => lang::get('LANG_LocModTool_ParentLabel'),
       'AdminMode'=>true // can edit parent.
       ));
  $retVal .= "<label for=\"location-delete\">".lang::get("LANG_LocModTool_DeleteLabel").":</label> <input type=checkbox id=\"location-delete\" name=\"location:deleted\" value='t'><br />
  <p>".lang::get("LANG_LocModTool_DeleteInstructions")."</p>";
  // location comments are included as a separate control on the main form.
  if(isset($args['includeLocationComment']) && $args['includeLocationComment'])
    $retVal .= data_entry_helper::textarea(array(
      'id'=>'location-comment',
      'fieldname'=>'location:comment',
      'label'=>lang::get("LANG_LocationModTool_CommentLabel")))."<br />";
  $laArgs = array("lookUpKey"=>"meaning_id", "sep"=>" ","class"=>"wide","tabNameFilter"=>"","numValues"=>10000);
  $defs=array();
  if(isset($args['siteTabSplitAttrs']) && $args['siteTabSplitAttrs']!=""){
    $defs=explode(':',$args['siteTabSplitAttrs']);
    $defs1=explode(',',$defs[0]);
    $laArgs["tabNameFilter"]=$defs1[0];
    $laArgs["class"]=$defs1[1];
  }
  $retVal .= iform_mnhnl_locationattributes($auth, $args, '', $laArgs);
  $retVal .= iform_mnhnl_SrefFields($auth, $args, true);
  if(count($defs)>1){
    $defs1=explode(',',$defs[1]);
    $laArgs["tabNameFilter"]=$defs1[0];
    $laArgs["class"]=$defs1[1];
    $retVal .= iform_mnhnl_locationattributes($auth, $args, '', $laArgs);
  }
  $args['interface']='Tabs';
  $mapOptions = iform_map_get_map_options($args,$auth['read']);
  $olOptions = iform_map_get_ol_options($args);
  if($args['locationMode']!='parent') { // this includes multi as well (see above)
    // can't call the protested control function
    $georefOpts = iform_map_get_georef_options($args, $auth['read']);
    // can't use place search without the driver API key
    if ($georefOpts['driver']=='geoplanet' && empty(helper_config::$geoplanet_api_key))
      $retVal .= '<p>The form structure includes a [place search] control but needs a geoplanet api key.</p>';
    else
      $retVal .=  data_entry_helper::georeference_lookup($georefOpts);
    $mapOptions['searchLayer']=true;
    $mapOptions['searchUpdatesSref']=false;
    $mapOptions['searchDisplaysPoint']=false;
  }
  // For main page we force to Tabs to ensure map drawn correctly
  $mapOptions['tabDiv'] = 'locations';
  $mapOptions['standardControls']=array('layerSwitcher','panZoomBar');
  $mapOptions['editLayer']=false;
  $mapOptions['maxZoom']=$args['zoomLevel'];
  if(isset($args['locationLayerWMS']) && $args['locationLayerWMS'] != ''){
    $mapOptions['layers']=array('ParentWMSLayer',"ParentLocationLayer","SiteLabelLayer","SiteAreaLayer","SitePathLayer","SitePointLayer");
    $mapOptions['clickableLayers']=array('ParentWMSLayer');
    $mapOptions['clickableLayersOutputMode']='custom';
    $mapOptions['clickableLayersOutputDiv']='clickableLayersOutputDiv';
    $mapOptions['clickableLayersOutputFn']='setClickedParent';
  } else {
    $mapOptions['layers']=array("ParentLocationLayer","SiteLabelLayer","SiteAreaLayer","SitePathLayer","SitePointLayer");
  }
  $retVal .= data_entry_helper::map_panel($mapOptions, $olOptions);
  $retVal .= iform_mnhnl_PointGrid($auth, $args, array('srefs'=>'2169,LUREF (m),X,Y,;4326,Lat/Long Deg,Lat,Long,D;4326,Lat/Long Deg:Min,Lat,Long,DM;4326,Lat/Long Deg:Min:Sec,Lat,Long,DMS'));
  $retVal .= '    <input type="submit" class="ui-state-default ui-corner-all" value="'.lang::get('LANG_Submit').'">
    <a href="'.iform_mnhnl_getReloadPath().'"><input class="ui-state-default ui-corner-all" type="button" name="cancel" value="'.lang::get('LANG_Cancel').'" /></a>
    </form></div>';
  data_entry_helper::$javascript .= "
mapInitialisationHooks.push(function(mapdiv) {
// try to identify if this map is the secondary small one
  if(mapdiv.id=='map')
    jQuery(\"#dummy-parent-id\").val('').change();});
";
  return $retVal;
}

function iform_mnhnl_recordernamesControl($node, $auth, $args, $tabalias, $options) {
    $values = array();
  	$userlist = array();
    $results = db_query('SELECT uid, name FROM {users}');
    while($result = db_fetch_object($results)){
    	$account = user_load($result->uid);
    	if($account->uid != 1 && user_access($args['permission_name'], $account)){
			$userlist[$result->name] = $result->name;
		}
    }
    if (isset(data_entry_helper::$entity_to_load['sample:recorder_names'])){
      if(!is_array(data_entry_helper::$entity_to_load['sample:recorder_names']))
        $values = explode("\r\n", data_entry_helper::$entity_to_load['sample:recorder_names']);
      else
        $values = data_entry_helper::$entity_to_load['sample:recorder_names'];
    }
    foreach($values as $value){ // ensure all existing entries are in list.
      $userlist[$value] = $value;
    }
    if(isset($options['disabled']) && $options['disabled'])
      return data_entry_helper::text_input(array_merge(array(
          'id'=>'sample:recorder_names',
          'fieldname'=>'sample:recorder_names[]',
          'label'=>lang::get('Recorder names'),
          'default'=>implode(', ', $values)
        ), $options));
    
    $r = data_entry_helper::listbox(array_merge(array(
      'id'=>'sample:recorder_names',
      'fieldname'=>'sample:recorder_names[]',
      'label'=>lang::get('Recorder names'),
      'size'=>6,
      'multiselect'=>true,
      'default'=>$values,
      'lookupValues'=>$userlist
      ,'validation'=>array('required')
    ), $options));
    return $r."<span id='RecorderInstructions'>".lang::get('LANG_RecorderInstructions')."</span><br />";
  }

function iform_mnhnl_lux5kgridControl($auth, $args, $node, $options) {
    global $indicia_templates, $user;
    $options = array_merge(array('initLoadArgs' => '{}',
       'Instructions1' => lang::get('LANG_CommonInstructions1'),
       'Instructions2' => lang::get('LANG_DE_Instructions2'),
       'MainFieldLabel' => lang::get('LANG_DE_LocationIDLabel'),
       'ChooseParentLabel' => lang::get('LANG_CommonParentLabel'),
       'ParentLabel' => lang::get('LANG_CommonParentLabel'),
       'NameLabel' => lang::get('LANG_CommonLocationNameLabel'),
       'FilterNameLabel' => lang::get('LANG_CommonFilterNameLabel'),
       'CodeLabel' => lang::get('LANG_CommonLocationCodeLabel'),
       'AdminMode'=>false,
       'disabled'=>false
    ), $options);

    switch($args['locationMode']){
      case 'multi' :
       $options = array_merge(array('ChooseParentFieldID' => 'sample-location-id',
                                    'ChooseParentFieldName' => 'sample:location_id',
                                    'MainFieldID' => 'dummy-location-id',
                                    'MainFieldName' => 'dummy:location_id'
                              ), $options);
       break;
      default : // parent, single, filtered
       $options = array_merge(array('ChooseParentFieldID' => 'dummy-parent-id',
                                    'ChooseParentFieldName' => 'dummy:parent_id',
                                    'ParentFieldID' => 'location-parent-id',
                                    'ParentFieldName' => 'location:parent_id',
                                    'MainFieldID' => 'location-id',
                                    'MainFieldName' => 'location:id'
                              ), $options);
        break;
    }
    // we are using meaning_ids: for the location attributes we need to convert the id to the term for the templates. Can't just output value - convert raw value
    $attrArgs = array(
       'valuetable'=>'location_attribute_value',
       'attrtable'=>'location_attribute',
       'key'=>'location_id',
       'fieldprefix'=>'locAttr',
       'extraParams'=>$auth['read'],
       'survey_id'=>$args['survey_id']
      );
    $locationAttributes = data_entry_helper::getAttributes($attrArgs, false); // this does not get values
    $termlists=array();
    $requiresConv=array();
    foreach($locationAttributes as $locAttr)
      if(!is_null($locAttr["termlist_id"])) {
        $termlists[] = $locAttr["termlist_id"];
        $requiresConv[]=$locAttr["attributeId"];
      }
    data_entry_helper::$javascript .= "\nvar requiresConv = ".json_encode($requiresConv).";\n";
    if(count($termlists)>0){
      data_entry_helper::$javascript .= "var terms = {";
	  $extraParams = $auth['read'] + array('view'=>'detail', 'preferred'=>'t', 'orderby'=>'meaning_id', 'termlist_id'=>$termlists);
	  $terms_data_def=array('table'=>'termlists_term','extraParams'=>$extraParams);
	  $terms = data_entry_helper::get_population_data($terms_data_def);
	  $first = true;
	  foreach ($terms as $term) {
		data_entry_helper::$javascript .= ($first ? '' : ',').$term['meaning_id'].": \"".htmlSpecialChars($term['term'])."\"\n";
		$first=false;
	  }
      data_entry_helper::$javascript .= "};
convertTerm=function(id){
	if(typeof terms[id] == 'undefined') return id;
	return terms[id];
}
";
    }
    $precisionAttrID=iform_mnhnl_getAttrID($auth, $args, 'location', 'Precision');
    if($precisionAttrID && isset($args['movePrecision']) && $args['movePrecision']) {
      data_entry_helper::$javascript .= "
var precisionAttr = jQuery('[name=locAttr\\:".$precisionAttrID."],[name^=locAttr\\:".$precisionAttrID."\\:]');
var precisionLabel = precisionAttr.prev();
precisionAttr.next().filter('br').remove();
precisionLabel.addClass('auto-width prepad').insertAfter('#imp-srefY');
precisionAttr.insertAfter(precisionLabel).addClass('precision');
";
    }
    $creatorAttr=iform_mnhnl_getAttrID($auth, $args, 'location', 'Creator');
    if(isset(data_entry_helper::$entity_to_load["sample:updated_by_id"])) // only set if data loaded from db, not error condition
      data_entry_helper::load_existing_record($auth['read'], 'location', data_entry_helper::$entity_to_load["sample:location_id"]);
    $retVal = '<div id="clickableLayersOutputDiv" style="display:none;"></div>';
    if($args['LocationTypeTerm']=='' && isset($args['loctoolsLocTypeID'])) $args['LocationTypeTerm']=$args['loctoolsLocTypeID'];
    $primary = iform_mnhnl_getTermID($auth, 'indicia:location_types',$args['LocationTypeTerm']);
    if($args['SecondaryLocationTypeTerm'] != ''){
      $secondary = iform_mnhnl_getTermID($auth, 'indicia:location_types',$args['SecondaryLocationTypeTerm']);
      $loctypequery="\"&query=\"+escape(JSON.stringify({'in': ['location_type_id', [$primary, $secondary]]}))";
      $loctypeParam=array($primary,$secondary);
    } else {
      $loctypequery="\"&location_type_id=".$primary."\"";
      $loctypeParam=$primary;
    }
    // $retVal .= "<p>".print_r($options,true)."</p>";
    data_entry_helper::$javascript .= "
// Create vector layers: one to display the Parent Square onto, and another for the site locations list
// the default edit layer is used for this sample
ParentLocStyleMap = new OpenLayers.StyleMap({\"default\": new OpenLayers.Style({strokeColor: \"Yellow\",fillOpacity: 0,strokeWidth: 4})});
ParentLocationLayer = new OpenLayers.Layer.Vector('Parents',{styleMap: ParentLocStyleMap,displayInLayerSwitcher: false});

defaultPointStyle = new OpenLayers.Style({pointRadius: 6,fillColor: \"Red\",fillOpacity: 0.3,strokeColor: \"Yellow\",strokeWidth: 1});
selectPointStyle = new OpenLayers.Style({pointRadius: 6,fillColor: \"Blue\",fillOpacity: 0.3,strokeColor: \"Yellow\",strokeWidth: 2});
defaultStyle = new OpenLayers.Style({pointRadius: 6, fillColor: \"Red\",fillOpacity: 0.3,strokeColor: \"Red\",strokeWidth: 1});
selectStyle = new OpenLayers.Style({fillColor: \"Blue\",fillOpacity: 0.3,strokeColor: \"Blue\",strokeWidth: 2});
//defaultLabelStyle = new OpenLayers.Style({fontColor: \"Yellow\", labelAlign: \"".$args['labelAlign']."\", labelXOffset: ".$args['labelXOffset'].", labelSelect: true});
dragPointStyleHash={pointRadius: 6,fillColor: \"Fuchsia\",fillOpacity: 0.3,strokeColor: \"Fuchsia\",strokeWidth: 1};
// Interesting behaviour of the Points: when any mod control is active it creates a set of vertices which can be 
// dragged, allowing the existing geometry to be modified. All fine for Lines and polygons, but for points
// the vertices are generated in the default style, and appear over the top of our existing geometry, so
// effectively making it appear unselected! 
// We want consistent colouring, so
// 1) normal=red, yellow surrounds points
// 2) highlighted=blue, yellow surrounds points
// 3) Drag points=purple.

SitePointStyleMap = new OpenLayers.StyleMap({\"default\": defaultPointStyle, \"select\": selectPointStyle});
SiteStyleMap = new OpenLayers.StyleMap({\"default\": defaultStyle, \"select\": selectStyle});
//SiteLabelStyleMap = new OpenLayers.StyleMap({\"default\": defaultLabelStyle});

".($args['SecondaryLocationTypeTerm'] != '' && $options['AdminMode'] ?
"SiteListPrimaryLabelStyleHash={fontColor: \"Red\", labelAlign: \"".$args['labelAlign']."\", labelXOffset: ".$args['labelXOffset'].", labelSelect: true, fontSize: \"1.2em\", fontWeight: \"bold\"};
SiteListSecondaryLabelStyleHash" : "
SiteListPrimaryLabelStyleHash")."={fontColor: \"Yellow\", labelAlign: \"".$args['labelAlign']."\", labelXOffset: ".$args['labelXOffset'].", labelSelect: true};

SitePointLayer = new OpenLayers.Layer.Vector('Site Points',{styleMap: SitePointStyleMap, displayInLayerSwitcher: false});
//SitePointLayer = new OpenLayers.Layer.Vector('Site Points',{styleMap: SitePointStyleMap});
SitePathLayer = new OpenLayers.Layer.Vector('Site Paths',{styleMap: SiteStyleMap, displayInLayerSwitcher: false});
SiteAreaLayer = new OpenLayers.Layer.Vector('Site Areas',{styleMap: SiteStyleMap, displayInLayerSwitcher: false});
SiteLabelLayer = new OpenLayers.Layer.Vector('Site Labels',{//styleMap: SiteLabelStyleMap, 
displayInLayerSwitcher: false});
var SiteNum = 0;\n";

    if(isset($args['locationLayerWMS']) && $args['locationLayerWMS'] != ''){
      // define Parent WMS Layer
      $WMSoptions = explode(',', $args['locationLayerWMS']);
      if($args['includeLocTools'] && function_exists('iform_loctools_listlocations')){
        $squares = iform_loctools_listlocations($node);
        if(is_array($squares) && count($squares)==0)
          $squares = array("-1"); // put in dummy value (all ids are > 0) to allow CQL filter to work on a blank list.
      } else $squares = 'all';
      // can't use the column name id in the cql_filter as this has a special (fid) meaning.
      data_entry_helper::$javascript .= "
WMSoptions = {SERVICE: 'WMS', VERSION: '1.1.0', STYLES: '', SRS: '".$WMSoptions[2]."', FORMAT: 'image/png', TRANSPARENT: 'true', LAYERS: '".$WMSoptions[1]."',
  CQL_FILTER: \"location_type_id=".$args['loctoolsLocTypeID']." AND website_id=".$args['website_id'].($squares != 'all' ? " AND location_id IN (".implode(',', $squares).")" : '')."\"
    };
ParentWMSLayer = new OpenLayers.Layer.WMS('Parent Grid',
  '".(function_exists(iform_proxy_url) ? iform_proxy_url($WMSoptions[0]) : $WMSoptions[0])."',
  WMSoptions, {
    minScale: ".$WMSoptions[3].",
    maxScale: ".$WMSoptions[4].",
    units: '".$WMSoptions[5]."',
    isBaseLayer: false,
    singleTile: true
  });\n";
      if($args['locationMode']=='multi' && isset(data_entry_helper::$entity_to_load["sample:location_id"])){
        data_entry_helper::$javascript .= "setClickedParent = function(features, div){ return ''; };\n";
      } else {
      	data_entry_helper::$javascript .= "setClickedParent = function(features, div){\n  jQuery('[name=".str_replace(':','\\:',$options['ChooseParentFieldName'])."]').val(features[0].data.id).change();\n  return '';\n};\n";
      }
    }

    data_entry_helper::$javascript .= "
// not happy about centroid calculations: lines and multipoints seem to take first vertex
_getCentroid = function(geometry){
  var retVal;
  retVal = {sumx: 0, sumy: 0, count: 0};
  switch(geometry.CLASS_NAME){
    case \"OpenLayers.Geometry.Point\":
      retVal = {sumx: geometry.x, sumy: geometry.y, count: 1};
      break;
    case \"OpenLayers.Geometry.MultiPoint\":
    case \"OpenLayers.Geometry.MultiLineString\":
    case \"OpenLayers.Geometry.LineString\":
    case \"OpenLayers.Geometry.MultiPolygon\":
    case \"OpenLayers.Geometry.Collection\":
      var retVal = {sumx: 0, sumy: 0, count: 0};
      for(var i=0; i< geometry.components.length; i++){
        var point=_getCentroid(geometry.components[i]);
        retVal = {sumx: retVal.sumx+point.sumx, sumy: retVal.sumy+point.sumy, count: retVal.count+point.count};
      }
      break;
    case \"OpenLayers.Geometry.Polygon\": // only do outer ring
      var point=geometry.getCentroid();
      retVal = {sumx: point.x*geometry.components[0].components.length, sumy: point.y*geometry.components[0].components.length, count: geometry.components[0].components.length};
      break;
  }
  return retVal;
}
getCentroid=function(geometry){
  var oddball=_getCentroid(geometry);
  return new OpenLayers.Geometry.Point(oddball.sumx/oddball.count, oddball.sumy/oddball.count);
}
recalcNumSites = function(){
  var sitearray = {};
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features);
  // don't need to consider Label layer...
  for(var i=0; i< allFeatures.length; i++){
    if(typeof allFeatures[i].attributes.SiteNum != 'undefined')
      sitearray['x'+allFeatures[i].attributes.SiteNum.toString()] = true;
  }
  var count = 0;
  for (x in sitearray) count++;
  jQuery('#dummy-num-sites').val(count);
};
recalcNumSites();
clearLocation = function(hookArg, clearName){ // clears all the data in the fields.
  if(clearName === true || (clearName == 'maybe' && jQuery('#".$options['MainFieldID']."').val() != ''))
    jQuery('".($args['locationMode']!='multi' ? "#sample-location-name" : "").",#location-name').val('');
  jQuery('#".$options['MainFieldID'].($args['locationMode']!='multi' ? ",#sample-location-id" : "").",#centroid_sref,#imp-srefX,#imp-srefY,#centroid_geom,#boundary_geom,[name=location\\:comment],[name=location\\:parent_id],#location-code').val('');
  jQuery('#location-code').attr('dbCode','');
".($args['locationMode']!='multi' && $args['siteNameTermListID']!="" && isset($args['duplicateNameCheck']) && $args['duplicateNameCheck']=='enforce' ?
"  jQuery('#location-name option').removeAttr('disabled');
  var nameVal = jQuery('#location-name').val();
  for(var i=0; i< SiteLabelLayer.features.length; i++){
    if(typeof SiteLabelLayer.features[i].attributes.SiteNum != 'undefined'){
      // At the moment the allowable options are integers: if the old data is dodgy it may not hold an integer
      if(SiteLabelLayer.features[i].style.label == parseInt(SiteLabelLayer.features[i].style.label)){
		if(SiteLabelLayer.features[i].style.label == nameVal) jQuery('#location-name').val('');
		jQuery('#location-name').find('option').filter('[value='+SiteLabelLayer.features[i].style.label+']').attr('disabled','disabled');
      }
    }
  }\n":"").
"  jQuery('#location_location_type_id').val('$primary');
  // first  to remove any hidden multiselect checkbox unclick fields
  var fullAttrList=jQuery('[name^=locAttr\\:]').not('[name$=\\:term]');
  var attrList=jQuery('[name^=locAttr\\:]').not('[name$=\\:term]').not('.filterFields');
  fullAttrList.filter('.multiselect').remove();
  fullAttrList.filter(':checkbox').removeAttr('checked').each(function(idx,elem){
    var name = jQuery(elem).attr('name').split(':');
    var value = jQuery(elem).val().split(':');
    jQuery('[name^=locAttr\\:'+name[1]+'\\:]').filter(':hidden').remove();
    jQuery(elem).val(value[0]);
  });
  // rename
  fullAttrList.each(function(){
    var name = jQuery(this).attr('name').split(':');
    if(name[1].indexOf('[]') > 0) name[1] = name[1].substr(0, name[1].indexOf('[]'));
    jQuery(this).attr('name', name[0]+':'+name[1]);
  });
  // reset values (checkboxes done above).
  attrList.filter(':radio').removeAttr('checked');
  attrList.filter(':text').val('');
  attrList.filter('select').val('');
  // rename checkboxes to add square brackets
  attrList.filter(':checkbox').each(function(idx,elem){
	var name = jQuery(elem).attr('name').split(':');
	var similar = jQuery('[name=locAttr\\:'+name[1]+'],[name=locAttr\\:'+name[1]+'\\[\\]]').filter(':checkbox');
	if(similar.length > 1) // only do this for checkbox groups.
		jQuery(this).attr('name', name[0]+':'+name[1]+'[]');
  });
  if(typeof hook_set_defaults != 'undefined') hook_set_defaults(hookArg);
}
setPermissions = function(enableItems, disableItems){
  if(disableItems.length > 0) jQuery(disableItems.join(',')).attr('disabled',true);
  if(enableItems.length > 0) jQuery(enableItems.join(',')).removeAttr('disabled');
}
// sets the permissions when there is nothing selected, and no parent is provided
setPermissionsNoParent = function(){
  setPermissions([],
                 ['[name=locations_website\\:website_id]',
                  '#".$options['MainFieldID']."',
                  '[name=location\\:code]',
                  '[name=location\\:name]',
                  '[name=location\\:comment]',
                  '[name=location\\:location_type_id]',
                  '[name=location\\:deleted]',
                  '[name=location\\:parent_id]',
                  '[name^=locAttr\\:]',
                  '#dummy-name',
                  '#imp-sref',
                  '#imp-geom',
                  '#imp-boundary-geom']);
}
setPermissionsNoSite = function(){
  // In filter mode, if parent is in filter options, need it available. Also in that case will need to enter filter options before the main ID becomes available
  // else when creating a new site, it is possible to select an old site from the drop down, provided there are some to select.
  var disable = ['[name=locations_website\\:website_id]',
                  '[name=location\\:code]',
                  '[name=location\\:name]',
                  '[name=location\\:comment]',
                  '[name=location\\:location_type_id]',
                  '[name=location\\:deleted]',
                  '[name^=locAttr\\:]',
                  '#dummy-name',
                  '#imp-sref',
                  '#imp-geom',
                  '#imp-boundary-geom'];
  if(typeof indiciaData.filterMode == 'undefined'){
    var enable = ['#".$options['MainFieldID']."']; // can choose site from drop down.
    disable.push('[name=location\\:parent_id]');
  } else {
    disable.push('#".$options['MainFieldID']."');
    var enable = ['[name=location\\:parent_id]'];
  }
  setPermissions(enable,disable);
}
setPermissionsOldEditableSite = function(){
  setPermissions(['#".$options['MainFieldID']."',
                  '[name=location\\:code]',
                  '[name=location\\:name]',
                  '[name=location\\:comment]',
                  '[name=location\\:location_type_id]',
                  '[name=location\\:deleted]',
                  '[name=location\\:parent_id]',
                  '[name^=locAttr\\:]',
                  '#dummy-name',
                  '#imp-sref',
                  '#imp-geom',
                  '#imp-boundary-geom'],
                 ['[name=locations_website\\:website_id]']);
}
setPermissionsOldReadOnlySite = function(){
  setPermissions(['#".$options['MainFieldID']."'],
                 ['[name=locations_website\\:website_id]',
                  '[name=location\\:code]',
                  '[name=location\\:name]',
                  '[name=location\\:comment]',
                  '[name=location\\:location_type_id]',
                  '[name=location\\:deleted]',
                  '[name=location\\:parent_id]',
                  '[name^=locAttr\\:]',
                  '#dummy-name',
                  '#imp-sref',
                  '#imp-geom',
                  '#imp-boundary-geom']);
}
setPermissionsNewSite = function(){
  // when creating a new site, it is possible to select an old site from the drop down, provided there are some to select.
  var enable = ['[name=locations_website\\:website_id]',
                '[name=location\\:code]',
                '[name=location\\:name]',
                '[name=location\\:comment]',
                '[name=location\\:location_type_id]',
                '[name=location\\:parent_id]',
                '[name^=locAttr\\:]',
                '#dummy-name',
                '#imp-sref',
                '#imp-geom',
                '#imp-boundary-geom'];
  var disable = ['[name=location\\:deleted]'];
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features);
  var haveOld=false;
  for(var i=0; i<allFeatures.length; i++){
    if(allFeatures[i].attributes['new']==false){
      haveOld=true;
    }}
  if(haveOld){
    enable.push('#".$options['MainFieldID']."');  // in case we want to change to an existing site.
  } else {
    disable.push('#".$options['MainFieldID']."');
  }
  setPermissions(enable,disable);
}
loadLocation = function(feature){ // loads all the data into the location fields from a feature.
  if(feature.attributes['new'])
    setPermissionsNewSite();
  else if (feature.attributes.canEdit)
    setPermissionsOldEditableSite();
  else
    setPermissionsOldReadOnlySite();
".($args['locationMode']=='multi' ?
"  var mySelector = '#dummy-name';
" : "  var mySelector = '#location-name';
  clearLocation(false, true);
")."
".($args['siteNameTermListID']!="" ? "  jQuery(mySelector).find('option').removeAttr('disabled');
" : "").
"  // the label is stored in the SiteLabelLayer. For new locations this is the only place the name is stored in the generic module.
  for(var i=0; i< SiteLabelLayer.features.length; i++){
    if(typeof SiteLabelLayer.features[i].attributes.SiteNum != 'undefined'){
      if(feature.attributes.SiteNum == SiteLabelLayer.features[i].attributes.SiteNum){
        jQuery('#dummy-name').val(SiteLabelLayer.features[i].style.label);
      }
".($args['siteNameTermListID']!="" ? "      else {
        // At the moment the allowable options are integers: if the old data is dodgy it may not hold an integer
        if(SiteLabelLayer.features[i].style.label == parseInt(SiteLabelLayer.features[i].style.label))
          jQuery(mySelector).find('option').filter('[value='+SiteLabelLayer.features[i].style.label+']').attr('disabled','disabled');
      }
" : "").
"    }
  }
".($args['locationMode']=='multi' ?
"" : ";  // main field ID could be a select without an entry for me (in case of a filter) so add one if needed.
  var amIaSelect = jQuery('#".$options['MainFieldID']."').filter('select');
  if(amIaSelect.length>0 && amIaSelect.find('[value='+feature.attributes.data.id+']').length==0){
    amIaSelect.append('<option value=\"'+feature.attributes.data.id+'\">'+feature.attributes.data.name+'</option>');
  }
  jQuery(\"#".$options['MainFieldID'].",#sample-location-id\").val(feature.attributes.data.id);
  // parent_id is left as is in drop down if present. Not multi so must be an existing site.
  jQuery('#location-name,#sample-location-name').val(feature.attributes.data.name);
  jQuery('#location_location_type_id').val(feature.attributes.data.location_type_id);
  if(feature.attributes.data.comment == null) feature.attributes.data.comment='';
  jQuery('[name=location\\:comment]').val(feature.attributes.data.comment);
  jQuery('[name=location\\:parent_id],[name=dummy\\:parent_id]').val(feature.attributes.data.parent_id);
  jQuery('#location-code').val(feature.attributes.data.code).attr('dbCode',feature.attributes.data.code);
  jQuery('#imp-geom').val(feature.attributes.data.centroid_geom); // this is as stored in the database i.e. 3857/900913 projection, not necessarily the map projection
  jQuery('#imp-boundary-geom').val(feature.attributes.data.boundary_geom); // this is as stored in the database i.e. 3857/900913 projection, not necessarily the map projection
  setSref(feature.geometry, feature.attributes.data.centroid_sref);
  // reset attributes is done by clearLocation above. this clears the values of checkboxes.
  jQuery.getJSON('".data_entry_helper::$base_url."/index.php/services/data/location_attribute_value' +
            '?mode=json&view=list&auth_token=".$auth['read']['auth_token']."&nonce=".$auth['read']["nonce"]."&location_id='+feature.attributes.data.id+'&callback=?', function(data) {
    if(data instanceof Array && data.length>0){
      for (var i=0;i<data.length;i++){
        if (data[i].id) {
          // no multiselect or boolean checkboxes at the moment so don't code
          var radiobuttons = jQuery('[name=locAttr\\:'+data[i]['location_attribute_id']+'],[name^=locAttr\\:'+data[i]['location_attribute_id']+'\\:]').filter(':radio');
          var checkbuttons = jQuery('[name=locAttr\\:'+data[i]['location_attribute_id']+'\\[\\]],[name^=locAttr\\:'+data[i]['location_attribute_id']+'\\:]').filter(':checkbox');
          if(radiobuttons.length > 0){ // radio buttons all share the same name, only one checked.
            radiobuttons.attr('name', 'locAttr:'+data[i]['location_attribute_id']+':'+data[i].id)
                  .filter('[value='+data[i].raw_value+']').attr('checked', 'checked');
          } else if(checkbuttons.length > 0){ // checkbuttons buttons have different name if selected, any number selected.
			checkbuttons = checkbuttons.filter('[value='+data[i].raw_value+']')
				.attr('name', 'locAttr:'+data[i]['location_attribute_id']+':'+data[i].id).attr('checked', 'checked');
			checkbuttons.each(function(){
				jQuery('<input type=\"hidden\" value=\"\" class=\"multiselect\">').attr('name', jQuery(this).attr('name')).insertBefore(this);
			});
          } else {
            jQuery('[name=locAttr\\:'+data[i]['location_attribute_id']+']')
                      .attr('name', 'locAttr:'+data[i]['location_attribute_id']+':'+data[i].id).val(data[i].raw_value);
            if(jQuery('[name=locAttr\\:'+data[i]['location_attribute_id']+'\\:term]').length>0){ // autocomplete entries: force a lookup, we are using meaning_id
              jQuery('[name=locAttr\\:'+data[i]['location_attribute_id']+'\\:term]').val('');
              jQuery.getJSON('".data_entry_helper::$base_url."/index.php/services/data/termlists_term' +
                '?mode=json&view=detail&auth_token=".$auth['read']['auth_token']."&nonce=".$auth['read']["nonce"]."&preferred=t&meaning_id='+data[i].raw_value+'&callback=?', function(tdata) {
                if(tdata.length>0){
                  jQuery('[name^=locAttr]').filter('[value='+tdata[0].meaning_id+']').each(function(idx,elem){
                    var name = jQuery(elem).attr('name').split(':');
                    jQuery('[name=locAttr\\:'+name[1]+'\\:term]').val(tdata[0].term);
                  });
                }
              });
            }
          }
        }
      }
      if(typeof hook_loadFilters != 'undefined')
        hook_loadFilters(); // can only be done after attributes loaded
     }});
")."
  if(typeof hook_loadLocation != 'undefined')
    hook_loadLocation(feature);
}
checkEditable = function(isNew, id){
  if(isNew) return true; // if I have created a new Site in this session, I can edit it.
  if(typeof canEditExistingSites != 'undefined') return canEditExistingSites;
  return(SiteEditable[id]);
}
convertFeature = function(feature, projection){
  if(feature instanceof Array){
    if(feature.length == 0) return geom;
    var newfeatures = [];
    $.each(feature, function(idx, featureElem){
      newfeatures.push(convertFeature(featureElem, projection));
    });
    return newfeatures;
  }
  feature.geometry = convertGeom(feature.geometry, projection);
  return feature;
}
convertGeom = function(geom, projection){
  if (projection.projcode!='EPSG:900913' && projection.projcode!='EPSG:3857') { 
    var cloned = geom.clone();
    return cloned.transform(new OpenLayers.Projection('EPSG:900913'), projection);
  }
  return geom;
}
reverseConvertGeom = function(geom, projection){
  if (projection.projcode!='EPSG:900913' && projection.projcode!='EPSG:3857') {
    var cloned = geom.clone();
    return cloned.transform(projection, new OpenLayers.Projection('EPSG:900913'));
  }
  return geom;
}
zoomToLayerExtent = function(layer){
  var layerBounds = layer.getDataExtent().clone(); // use a clone
  var mapBounds = layer.map.getMaxExtent();
  if(layerBounds.left   < mapBounds.left)   layerBounds.left = mapBounds.left;
  if(layerBounds.right  > mapBounds.right)  layerBounds.right = mapBounds.right;
  if(layerBounds.bottom < mapBounds.bottom) layerBounds.bottom = mapBounds.bottom;
  if(layerBounds.top    > mapBounds.top)    layerBounds.top = mapBounds.top;
  layer.map.zoomToExtent(layerBounds);
}

loadFeatures = function(parent_id, child_id, childArgs, loadParent, setSelectOptions, zoomParent, clearLocationFlag, setPermissionState){
  ParentLocationLayer.destroyFeatures();
  SiteLabelLayer.destroyFeatures();
  SiteAreaLayer.destroyFeatures();
  SitePathLayer.destroyFeatures();
  SitePointLayer.destroyFeatures();
  if(setSelectOptions)
    jQuery('#".$options['MainFieldID']."').find('option').remove();
".($args['locationMode']!='multi' && $args['siteNameTermListID']!="" ?
"  jQuery('#location-name').find('option').removeAttr('disabled');\n"
: "").
"  if(clearLocationFlag){
    clearLocation(false, true);
  }
  deactivateControls();
  recalcNumSites();
  SiteNum=0;
  if(parent_id != '' && loadParent){
    jQuery.getJSON(\"".data_entry_helper::$base_url."/index.php/services/data/location/\"+parent_id+\"?mode=json&view=detail&auth_token=".$auth['read']['auth_token']."&nonce=".$auth['read']["nonce"]."&callback=?\",
      function(data) {
       if (data.length>0) {
         var parser = new OpenLayers.Format.WKT();
         if(data[0].boundary_geom){ // only one location if any
           var feature = parser.read(data[0].boundary_geom)
           feature=convertFeature(feature, $('#map')[0].map.projection);
           ParentLocationLayer.addFeatures([feature]);
           if(zoomParent) {
             // Parent squares may overlap the edges of the map.
             zoomToLayerExtent(ParentLocationLayer);
           }
         }
         selectFeature.activate();
".($args['locationMode']=='multi' ? "  jQuery('#sample-location-name').val(data[0].name);" : "").
"       }});
  }
  if(!loadParent) selectFeature.activate();
  if(parent_id != '' || loadParent==false){
    jQuery.getJSON(\"".data_entry_helper::$base_url."/index.php/services/data/location?mode=json&view=detail&auth_token=".$auth['read']['auth_token']."&nonce=".$auth['read']["nonce"]."&callback=?&orderby=name\"+".$loctypequery."+(loadParent ? '&parent_id='+parent_id : ''),
      function(data) {
        if (data.length>0) {
          if(setPermissionState) setPermissionsNoSite();
          if(child_id=='') selectFeature.activate(); // we have things we can select
          if(setSelectOptions)
            jQuery(\"#".$options['MainFieldID']."\").append('<option value=\"\">".lang::get("LANG_CommonEmptyLocationID")."</option>');
          var parser = new OpenLayers.Format.WKT();
          var locationList = [];
          for (var i=0;i<data.length;i++){
            var centreFeature = false;
            var feature;
            SiteNum++;
            if(data[i].boundary_geom){
              feature = parser.read(data[i].boundary_geom); // assume map projection=900913, if GEOMETRYCOLLECTION this will be an array or its children!
              var centre = false;
              if(data[i].centroid_geom) {
                centreFeature = parser.read(data[i].centroid_geom); // assume map projection=900913
                centreFeature=convertFeature(centreFeature, $('#map')[0].map.projection);
              }
              var pointFeature = false;
              var lineFeature = false;
              var areaFeature = false;
              if(typeof(feature)=='object'&&(feature instanceof Array)){
                for(var j=0; j< feature.length; j++){
                  switch(feature[j].geometry.CLASS_NAME){
                    case \"OpenLayers.Geometry.Point\":
                    case \"OpenLayers.Geometry.MultiPoint\":
                      pointFeature = feature[j];
                      break;
                    case \"OpenLayers.Geometry.LineString\":
                    case \"OpenLayers.Geometry.MultiLineString\":
                      lineFeature = feature[j];
                      break;
                    default:
                      areaFeature = feature[j];
                      break;
                  }
                }
              } else {
                switch(feature.geometry.CLASS_NAME){
                  case \"OpenLayers.Geometry.Point\":
                  case \"OpenLayers.Geometry.MultiPoint\":
                    pointFeature = feature;
                    break;
                  case \"OpenLayers.Geometry.LineString\":
                  case \"OpenLayers.Geometry.MultiLineString\":
                    lineFeature = feature;
                    break;
                  default:
                    areaFeature = feature;
                    break;
                }
              }
              if(areaFeature) {
                areaFeature.attributes = {highlighted: false, 'new': false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
                areaFeature=convertFeature(areaFeature, $('#map')[0].map.projection);
                SiteAreaLayer.addFeatures([areaFeature]);
                if(!centreFeature) centreFeature = new OpenLayers.Feature.Vector(getCentroid(areaFeature.geometry));
              }
              if(lineFeature) {
                lineFeature.attributes = {highlighted: false, 'new': false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
                lineFeature=convertFeature(lineFeature, $('#map')[0].map.projection);
                SitePathLayer.addFeatures([lineFeature]);
                if(!centreFeature) centreFeature = new OpenLayers.Feature.Vector(getCentroid(lineFeature.geometry));
              }
              if(pointFeature) {
                pointFeature.attributes = {highlighted: false, 'new': false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
                pointFeature=convertFeature(pointFeature, $('#map')[0].map.projection);
                SitePointLayer.addFeatures([pointFeature]);
                if(!centreFeature) centreFeature = new OpenLayers.Feature.Vector(getCentroid(pointFeature.geometry));
              }
            } else {
              // no boundary, only a centre point.
              feature = parser.read(data[i].centroid_geom); // assume map projection=900913
              feature=convertFeature(feature, $('#map')[0].map.projection);
              centreFeature = feature.clone();
              feature.attributes = {highlighted: false, 'new': false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
              SitePointLayer.addFeatures([feature]);
            }
            centreFeature.attributes = {highlighted: false, 'new': false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
".($args['SecondaryLocationTypeTerm'] != '' && $options['AdminMode'] ?
"            if(data[i].location_type_id == $secondary){
              centreFeature.style = jQuery.extend({}, SiteListSecondaryLabelStyleHash);
            } else 
  " : "").
"            centreFeature.style = jQuery.extend({}, SiteListPrimaryLabelStyleHash);
            centreFeature.style.label = data[i].name;
            SiteLabelLayer.addFeatures([centreFeature]);
            locationList.push({id : data[i].id, feature : centreFeature});
            if(setSelectOptions){
              if(child_id != '' && data[i].id == child_id){
                jQuery(\"#".$options['MainFieldID']."\").append('<option value=\"'+data[i].id+'\" selected=\"selected\">'+data[i].name+'</option>');
              } else {
                jQuery(\"#".$options['MainFieldID']."\").append('<option value=\"'+data[i].id+'\">'+data[i].name+'</option>');
              }
            }
            if(child_id==data[i].id && setPermissionState){
              if(centreFeature.attributes.canEdit){
                setPermissionsOldEditableSite();
              } else {
                setPermissionsOldReadOnlySite()
              }
            }
            if(typeof hook_ChildFeatureLoad != 'undefined') hook_ChildFeatureLoad(feature, data[i], child_id, childArgs);
          }
          recalcNumSites();
          ".($args['locationMode']=='single'||$args['locationMode']=='filtered' ? "" : "if(setSelectOptions) ")."populateExtensions(locationList);
        } else if(setSelectOptions){
          if(setPermissionState) setPermissionsNoParent();
          jQuery('#".$options['MainFieldID']."').append('<option value=\"\">".lang::get("LANG_NoSitesInSquare")."</option>');
        }
    });
  } else {
    if(setPermissionState) setPermissionsNoParent();
    if(setSelectOptions)
      jQuery('#".$options['MainFieldID']."').append('<option value=\"\">".lang::get("LANG_CommonChooseParentFirst")."</option>');
  }
};
loadChildFeatures = function(parent_id, setSelectOptions){
// this is only used when changing the parent: need to keep current highlighted features.
  SiteNum=1;
  for(var i=SiteLabelLayer.features.length-1; i >= 0; i--) {
    if(SiteLabelLayer.features[i].attributes.highlighted == false) {
      SiteLabelLayer.destroyFeatures([SiteLabelLayer.features[i]]);
    } else {
      SiteLabelLayer.features[i].attributes.SiteNum == SiteNum;
    }
  }
  for(var i=SiteAreaLayer.features.length-1; i >= 0; i--) {
    if(SiteAreaLayer.features[i].attributes.highlighted == false) {
      SiteAreaLayer.destroyFeatures([SiteAreaLayer.features[i]]);
    } else {
      SiteAreaLayer.features[i].attributes.SiteNum == SiteNum;
    }
  }
  for(var i=SitePathLayer.features.length-1; i >= 0; i--) {
    if(SitePathLayer.features[i].attributes.highlighted == false) {
      SitePathLayer.destroyFeatures([SitePathLayer.features[i]]);
    } else {
      SitePathLayer.features[i].attributes.SiteNum == SiteNum;
    }
  }
  for(var i=SitePointLayer.features.length-1; i >= 0; i--) {
    if(SitePointLayer.features[i].attributes.highlighted == false) {
      SitePointLayer.destroyFeatures([SitePointLayer.features[i]]);
      } else {
      SitePointLayer.features[i].attributes.SiteNum == SiteNum;
    }
  }
  if(setSelectOptions)
    jQuery('#".$options['MainFieldID']."').find('option').not(':selected').remove();
".($args['locationMode']!='multi' && $args['siteNameTermListID']!="" ?
"  jQuery('#location-name').find('option').removeAttr('disabled');\n"
: "").
"  recalcNumSites();
  jQuery.getJSON(\"".data_entry_helper::$base_url."/index.php/services/data/location?mode=json&view=detail&auth_token=".$auth['read']['auth_token']."&nonce=".$auth['read']["nonce"]."&callback=?&orderby=name\"+".$loctypequery."+'&parent_id='+parent_id,
      function(data) {
        if (data.length>0) {
          if(setSelectOptions)
            jQuery(\"#".$options['MainFieldID']."\").append('<option value=\"\">".lang::get("LANG_CommonEmptyLocationID")."</option>');
          var parser = new OpenLayers.Format.WKT();
          var locationList = [];
          for (var i=0;i<data.length;i++){
            var centreFeature = false;
            var feature;
            SiteNum++;
            if(data[i].boundary_geom){
              feature = parser.read(data[i].boundary_geom); // assume map projection=900913, if GEOMETRYCOLLECTION this will be an array or its children!
              var centre = false;
              if(data[i].centroid_geom) {
                centreFeature = parser.read(data[i].centroid_geom); // assume map projection=900913
                centreFeature=convertFeature(centreFeature, $('#map')[0].map.projection);
              }
              var pointFeature = false;
              var lineFeature = false;
              var areaFeature = false;
              if(typeof(feature)=='object'&&(feature instanceof Array)){
                for(var j=0; j< feature.length; j++){
                  switch(feature[j].geometry.CLASS_NAME){
                    case \"OpenLayers.Geometry.Point\":
                    case \"OpenLayers.Geometry.MultiPoint\":
                      pointFeature = feature[j];
                      break;
                    case \"OpenLayers.Geometry.LineString\":
                    case \"OpenLayers.Geometry.MultiLineString\":
                      lineFeature = feature[j];
                      break;
                    default:
                      areaFeature = feature[j];
                      break;
                  }
                }
              } else {
                switch(feature.geometry.CLASS_NAME){
                  case \"OpenLayers.Geometry.Point\":
                  case \"OpenLayers.Geometry.MultiPoint\":
                    pointFeature = feature;
                    break;
                  case \"OpenLayers.Geometry.LineString\":
                  case \"OpenLayers.Geometry.MultiLineString\":
                    lineFeature = feature;
                    break;
                  default:
                    areaFeature = feature;
                    break;
                }
              }
              if(areaFeature) {
                areaFeature.attributes = {highlighted: false, 'new': false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
                areaFeature=convertFeature(areaFeature, $('#map')[0].map.projection);
                SiteAreaLayer.addFeatures([areaFeature]);
                if(!centreFeature) centreFeature = new OpenLayers.Feature.Vector(getCentroid(areaFeature.geometry));
              }
              if(lineFeature) {
                lineFeature.attributes = {highlighted: false, 'new': false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
                lineFeature=convertFeature(lineFeature, $('#map')[0].map.projection);
                SitePathLayer.addFeatures([lineFeature]);
                if(!centreFeature) centreFeature = new OpenLayers.Feature.Vector(getCentroid(lineFeature.geometry));
              }
              if(pointFeature) {
                pointFeature.attributes = {highlighted: false, 'new': false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
                pointFeature=convertFeature(pointFeature, $('#map')[0].map.projection);
                SitePointLayer.addFeatures([pointFeature]);
                if(!centreFeature) centreFeature = new OpenLayers.Feature.Vector(getCentroid(pointFeature.geometry));
              }
            } else {
              // no boundary, only a centre point.
              feature = parser.read(data[i].centroid_geom); // assume map projection=900913
              feature=convertFeature(feature, $('#map')[0].map.projection);
              centreFeature = feature.clone();
              feature.attributes = {highlighted: false, 'new': false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
              SitePointLayer.addFeatures([feature]);
            }
            centreFeature.attributes = {highlighted: false, 'new': false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
".($args['SecondaryLocationTypeTerm'] != '' && $options['AdminMode'] ?
"            if(data[i].location_type_id == $secondary){
              centreFeature.style = jQuery.extend({}, SiteListSecondaryLabelStyleHash);
            } else 
  " : "").
"            centreFeature.style = jQuery.extend({}, SiteListPrimaryLabelStyleHash);
            centreFeature.style.label = data[i].name;
            SiteLabelLayer.addFeatures([centreFeature]);
            locationList.push({id : data[i].id, feature : centreFeature});
            if(setSelectOptions){
              jQuery(\"#".$options['MainFieldID']."\").append('<option value=\"'+data[i].id+'\">'+data[i].name+'</option>');
            }
            if(typeof hook_ChildFeatureLoad != 'undefined') hook_ChildFeatureLoad(feature, data[i], '', {});
          }
          recalcNumSites();
          ".($args['locationMode']=='single'||$args['locationMode']=='filtered' ? "" : "if(setSelectOptions) ")."populateExtensions(locationList);
        }
  });
};
populateExtensions = function(locids){
// first get the list of attributes, sorted by location_id. Locations are in name order not ID order.
// rip out the list of attribute captions.
// loop through list of locations,
// Binary search attribute list for my locations
// Run through its attributes and do translate
";
    if($args['extendLocationNameTemplate']!="") {
      data_entry_helper::$javascript .= "  locList = [];
  for(var i=0;i<locids.length;i++){
    var template = \"".$args['extendLocationNameTemplate']."\".replace('{name}',locids[i].feature.attributes.data.name);
    template = template.replace('{code}',locids[i].feature.attributes.data.code==null?'-':locids[i].feature.attributes.data.code);
    locList.push({id : locids[i].id,
        feature : locids[i].feature,
        template : template});
  }
  jQuery.getJSON('".data_entry_helper::$base_url."/index.php/services/data/location_attribute_value' +
            '?mode=json&view=list&auth_token=".$auth['read']['auth_token']."&nonce=".$auth['read']["nonce"]."&orderby=location_id'+".$loctypequery."+'&callback=?', function(data) {
    if(data instanceof Array && data.length>0){
      function locBinarySearch(attList, location_id){ // this makes assumptions about the location attribute list contents and order.
        var startIndex = 0,
            stopIndex = attList.length - 1;
        while(startIndex <= stopIndex){
          var middle = Math.floor((stopIndex + startIndex)/2);
          if (attList[middle].location_id == location_id) {
            // there will be more than one attribute per location. Scan back.
            while(middle > 0 && attList[middle-1].location_id == location_id) middle--;
            return middle;
          }
          //adjust search area
          if (parseInt(location_id) < parseInt(attList[middle].location_id)){
            stopIndex = middle - 1;
          } else {
            startIndex = middle + 1;
          }
        }
        return -1;
      }
      templateReplace = function(template, location_id, attList){
        var attrid = locBinarySearch(attList, location_id);
        if(attrid >= 0) {
          while(attrid < attList.length && attList[attrid].location_id == location_id) {
            if (attList[attrid].id){
              template = template.replace('{'+attList[attrid].caption+'}',(attList[attrid].termlist_id != null ? convertTerm(parseInt(attList[attrid].raw_value)) : attList[attrid].value));
            }
            attrid++;
          }
        }";
    $attrArgs = array(
       'valuetable'=>'location_attribute_value',
       'attrtable'=>'location_attribute',
       'key'=>'location_id',
       'fieldprefix'=>'locAttr',
       'extraParams'=>$auth['read'],
       'survey_id'=>$args['survey_id']
      );
    $locationAttributes = data_entry_helper::getAttributes($attrArgs, false);
    foreach($locationAttributes as $locAttr)
      data_entry_helper::$javascript .= "\n        template = template.replace('{".$locAttr["untranslatedCaption"]."}','-');";
    data_entry_helper::$javascript .= "
        return template;
      };
      for (var j=0;j<locList.length;j++){
        locList[j].template = templateReplace(locList[j].template, locList[j].id, data);
        SiteLabelLayer.removeFeatures([locList[j].feature]);
        locList[j].feature.style.label = locList[j].template;
        SiteLabelLayer.addFeatures([locList[j].feature]);\n".
($args['locationMode']!='filtered' ? 
"        var myOption = jQuery(\"#".$options['MainFieldID']."\").find('option').filter('[value='+locList[j].id+']').empty();
".($args['SecondaryLocationTypeTerm']!='' && $options['AdminMode']  ?
"        if(locList[j].feature.attributes.data.location_type_id == $primary)
          myOption.css('color','red');
" : "")."        myOption.append(locList[j].template);" : "")."
      }
    }});
";
    }
    data_entry_helper::$javascript .= "
}
getwkt = function(geometry, incFront, incBrackets){
  var retVal;
  retVal = '';
  switch(geometry.CLASS_NAME){
    case \"OpenLayers.Geometry.Point\":
      return((incFront!=false ? 'POINT' : '')+(incBrackets!=false ? '(' : '')+geometry.x+' '+geometry.y+(incBrackets!=false ? ')' : ''));
      break;
    case \"OpenLayers.Geometry.MultiPoint\":
      retVal = 'MULTIPOINT(';
      for(var i=0; i< geometry.components.length; i++)
        retVal += (i!=0 ? ',':'')+getwkt(geometry.components[i], false, true);
      retVal += ')';
      break;
    case \"OpenLayers.Geometry.LineString\":
      retVal = (incFront!=false ? 'LINESTRING' : '')+'(';
      for(var i=0; i< geometry.components.length; i++)
        retVal += (i!=0 ? ',':'')+getwkt(geometry.components[i], false, false);
      retVal += ')';
      break;
    case \"OpenLayers.Geometry.MultiLineString\":
      retVal = 'MULTILINESTRING(';
      for(var i=0; i< geometry.components.length; i++)
        retVal += (i!=0 ? ',':'')+getwkt(geometry.components[i], false, true);
      retVal += ')';
      break;
    case \"OpenLayers.Geometry.Polygon\": // only do outer ring
      retVal = (incFront!=false ? 'POLYGON' : '')+'((';
      for(var i=0; i< geometry.components[0].components.length; i++)
        retVal += (i!=0 ? ',':'')+getwkt(geometry.components[0].components[i], false, false);
      retVal += '))';
      break;
    case \"OpenLayers.Geometry.MultiPolygon\":
      retVal = 'MULTIPOLYGON(';
      for(var i=0; i< geometry.components.length; i++)
        retVal += (i!=0 ? ',':'')+getwkt(geometry.components[i], false, true);
      retVal += ')';
      break;
    case \"OpenLayers.Geometry.Collection\":
      retVal = 'GEOMETRYCOLLECTION(';
      for(var i=0; i< geometry.components.length; i++)
        retVal += (i!=0 ? ',':'')+getwkt(geometry.components[i], true, true);
      retVal += ')';
      break;
  }
  return retVal;
}
setGeomFields = function(){
  // use centre of Area as centroid
  // Build the combined Geometry, ignore label
  var geomstack = [];
  var completeGeom;
  var centreGeom;
  var centreSrefGeom;
  var mySiteNum;
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features);
  for(var i=allFeatures.length-1; i>=0; i--){
    if(allFeatures[i].attributes.highlighted == true){
      geomstack.push(allFeatures[i].geometry.clone()); // needs to be a clone as we don't want to transform the original geoms.
      mySiteNum = allFeatures[i].attributes.SiteNum;
    }
  }
  if(geomstack.length == 0){
".($args['locationMode']!='multi' ?
"    jQuery(\"#imp-boundary-geom\").val('');
    jQuery(\"#imp-geom\").val('');
    jQuery('#imp-sref').val('');
    jQuery('#imp-srefX').val('');
    jQuery('#imp-srefY').val('');
" : "").
"    return;
  } else if (geomstack.length == 1){
    completeGeom = geomstack[0];
  } else {
    completeGeom = new OpenLayers.Geometry.Collection(geomstack);
  }
  centreSrefGeom=getCentroid(completeGeom);
  // the geometry is in the map projection: if this doesn't match indicia's internal one, then must convert.
  if (SiteAreaLayer.map.projection.projcode!='EPSG:900913' && SiteAreaLayer.map.projection.projcode!='EPSG:3857') { 
    completeGeom.transform(SiteAreaLayer.map.projection,  new OpenLayers.Projection('EPSG:900913'));
  }
  var boundaryWKT = getwkt(completeGeom, true, true);
  centreGeom=getCentroid(completeGeom);
  var centreWKT = getwkt(centreGeom, true, true);
".($args['locationMode']=='multi' ?
"  var highlighted = gethighlight();
  hook_multisite_setGeomFields(highlighted[0], boundaryWKT, centreWKT);
" :
"  jQuery(\"#imp-boundary-geom\").val(boundaryWKT);
  jQuery(\"#imp-geom\").val(centreWKT);
  setSref(centreSrefGeom, 'TBC');  // forces the sref to be generated.
").
"}
setDrawnGeom = function() {
  // need to leave the location parent id enabled. Don't need to set geometries as we are using an existing location.
  setPermissionsNewSite();
  clearLocation(true, 'maybe');
  if(jQuery('#dummy-parent-id').length>0 && jQuery('[name=location\\:parent_id]').length>0 &&
      jQuery('#dummy-parent-id').val() != jQuery('[name=location\\:parent_id]').val())
    jQuery('[name=location\\:parent_id]').val(jQuery('#dummy-parent-id').val()).change();
".($creatorAttr ? "  jQuery('[name=locAttr:".$creatorAttr."],[name^=locAttr:".$creatorAttr.":]').val('".$user->name."');\n" : "").
"};
removeDrawnGeom = function(SiteNum){
  var highlighted=gethighlight();
  if(highlighted.length > 0 && highlighted[0].attributes.SiteNum == SiteNum) {
    unhighlightAll();
  }
  for(var i=SiteLabelLayer.features.length-1; i>=0; i--)
    if(SiteLabelLayer.features[i].attributes['new'] == true && SiteLabelLayer.features[i].attributes.SiteNum == SiteNum)
      SiteLabelLayer.destroyFeatures([SiteLabelLayer.features[i]]);
  for(var i=SiteAreaLayer.features.length-1; i>=0; i--)
    if(SiteAreaLayer.features[i].attributes['new'] == true && SiteAreaLayer.features[i].attributes.SiteNum == SiteNum)
      SiteAreaLayer.destroyFeatures([SiteAreaLayer.features[i]]);
  for(var i=SitePathLayer.features.length-1; i>=0; i--)
    if(SitePathLayer.features[i].attributes['new'] == true && SitePathLayer.features[i].attributes.SiteNum == SiteNum)
      SitePathLayer.destroyFeatures([SitePathLayer.features[i]]);
  for(var i=SitePointLayer.features.length-1; i>=0; i--)
    if(SitePointLayer.features[i].attributes['new'] == true && SitePointLayer.features[i].attributes.SiteNum == SiteNum)
      SitePointLayer.destroyFeatures([SitePointLayer.features[i]]);
  recalcNumSites();
}
resetVertices = function(){
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features);
  for(var i=allFeatures.length-1; i>=0; i--){
    if(typeof allFeatures[i].attributes['new'] == 'undefined'){ // not one of ours, so must be a vertex
      var layer= allFeatures[i].layer;
      layer.removeFeatures([allFeatures[i]]);
      allFeatures[i].style=dragPointStyleHash;
      layer.addFeatures([allFeatures[i]]);
    }
  }
  // Oddball case is single points: in this case they use the actual point to drag not a proxy vertex.
  if(modPointFeature.feature){
    if(modPointFeature.feature.geometry.CLASS_NAME == \"OpenLayers.Geometry.Point\") {
      var layer= modPointFeature.feature.layer;
      layer.removeFeatures([modPointFeature.feature]);
      modPointFeature.feature.style=dragPointStyleHash;
      layer.addFeatures([modPointFeature.feature]);
    }
  } else {
    for(var i=SitePointLayer.features.length-1; i>=0; i--){
      if(SitePointLayer.features[i].style != null){
        var feature = SitePointLayer.features[i];
        var layer = feature.layer;
        layer.removeFeatures([feature]);
        feature.style=null;
        layer.addFeatures([feature]);
      }
    }
  }
  SitePointLayer.redraw();
}
replaceGeom = function(feature, layer, modControl, geom, highlight, setFields){
  if(modControl.feature)
    modControl.unselectFeature(modControl.feature);
  var newfeature = new OpenLayers.Feature.Vector(geom, {});
  newfeature.attributes = feature.attributes;
  layer.destroyFeatures([feature]);
  layer.addFeatures([newfeature]);
  modControl.selectFeature(newfeature);
  selectFeature.highlight(newfeature);
  newfeature.attributes.highlighted=true;
  resetVertices();
  if(setFields) setGeomFields();
}
addAndSelectNewGeom = function(layer, modControl, geom, highlight){
  SiteNum++;
  var feature = new OpenLayers.Feature.Vector(geom, {highlighted: false, 'new': true, canEdit: true, SiteNum: SiteNum});
  layer.addFeatures([feature]);
  modControl.selectFeature(feature);
  feature.attributes.highlighted=true;
  selectFeature.highlight(feature);
  resetVertices();
  setGeomFields();
  recalcNumSites();
  return feature;
}
addToExistingFeatureSet = function(existingFeatures, layer, modControl, geom, highlight){
  var feature = new OpenLayers.Feature.Vector(geom, {});
  feature.attributes = existingFeatures[0].attributes;
  layer.addFeatures([feature]);
  modControl.selectFeature(feature);
  selectFeature.highlight(feature);
  feature.attributes.highlighted=true;
  resetVertices();
  setGeomFields();
}
unhighlightAll = function(){
  if(modAreaFeature.feature) modAreaFeature.unselectFeature(modAreaFeature.feature);
  if(modPathFeature.feature) modPathFeature.unselectFeature(modPathFeature.feature);
  if(modPointFeature.feature) modPointFeature.unselectFeature(modPointFeature.feature);
  var highlighted = gethighlight();
  for(var i=0; i<highlighted.length; i++) {
    highlighted[i].attributes.highlighted = false;
    selectFeature.unhighlight(highlighted[i]);
  }
  resetVertices();
}
highlightMe = function(id, SiteNum){
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features,SiteLabelLayer.features);
  for(var i=0; i<allFeatures.length; i++){
    if((typeof allFeatures[i].attributes.data != 'undefined' &&
          typeof allFeatures[i].attributes.data.id != 'undefined' &&
          allFeatures[i].attributes.data.id == id) || 
        (typeof allFeatures[i].attributes.SiteNum != 'undefined' &&
          allFeatures[i].attributes.SiteNum == SiteNum)){
      allFeatures[i].attributes.highlighted = true;
      selectFeature.highlight(allFeatures[i]);
    }
  }
}
gethighlight = function(){
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features,SiteLabelLayer.features);
  var features=[];
  for(var i=0; i<allFeatures.length; i++){
    if(allFeatures[i].attributes.highlighted==true){
      features.push(allFeatures[i]);
    }}
  return features;
}
// default is to add a dummy new empty label
if (typeof hook_new_site_added == 'undefined')
 hook_new_site_added = function(feature, SiteNum) {
  var centreGeom;
  var centrefeature;
  if(!feature){
    var div = jQuery('#map')[0];
    var mapCentre = div.map.getCenter();
    centreGeom = new OpenLayers.Geometry.Point(mapCentre.lon, mapCentre.lat);
  } else {
    centreGeom = getCentroid(feature.geometry);
  }
  centrefeature = new OpenLayers.Feature.Vector(centreGeom);
  centrefeature.attributes['new']=true;
  centrefeature.attributes.highlighted=true;
  centrefeature.attributes.SiteNum=SiteNum;
  centrefeature.style = jQuery.extend({}, SiteListPrimaryLabelStyleHash);
  SiteLabelLayer.addFeatures([centrefeature]);
  SitePointLayer.redraw();
};
addDrawnPointToSelection = function(geometry) {
  // we assume that we have a point geometry.
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"  if(ParentLocationLayer.features.length == 0) return;
  if(!ParentLocationLayer.features[0].geometry.intersects(geometry))
    alert(\"".lang::get('LANG_PointOutsideParent')."\");
" : "").
(isset($args['oneTypeAtATime']) && $args['oneTypeAtATime'] ?
"  if(modPathFeature.feature) modPathFeature.unselectFeature(modPathFeature.feature);
  if(modAreaFeature.feature) modAreaFeature.unselectFeature(modAreaFeature.feature);
  SitePathLayer.destroyFeatures();
  SiteAreaLayer.destroyFeatures();
" : "").
"  var highlightedFeatures = gethighlight();
".(!$options['AdminMode'] || (isset($args['adminsCanCreate']) && $args['adminsCanCreate']) ? 
"  if(highlightedFeatures.length == 0){
    setDrawnGeom();
    // No currently selected feature. Create a new one.
    feature = addAndSelectNewGeom(SitePointLayer, modPointFeature, geometry, false);
    hook_new_site_added(feature, feature.attributes.SiteNum);
    if(typeof addPGPoint != 'undefined') addPGPoint(geometry);
    return true;
  }
" : 
"  if(highlightedFeatures.length == 0) return true;
").
"  var selectedFeature = false;
  // a site is already selected so the Drawn/Specified state stays unaltered
  for(var i=0; i<SitePointLayer.features.length; i++){
    if(SitePointLayer.features[i].attributes.highlighted == true){
      selectedFeature = SitePointLayer.features[i];
      break;
    }}
  if(highlightedFeatures[0].attributes['new'] == true){
    if(!selectedFeature) {
      addToExistingFeatureSet(highlightedFeatures, SitePointLayer, modPointFeature, geometry, false);
      if(typeof addPGPoint != 'undefined') addPGPoint(geometry);
      return true;
    }
  } else { // highlighted is existing
    if(highlightedFeatures[0].attributes.canEdit){
      if(!selectedFeature) {
        addToExistingFeatureSet(highlightedFeatures, SitePointLayer, modPointFeature, geometry, false);
        if(typeof addPGPoint != 'undefined') addPGPoint(geometry);
        return true;
      }
    } else {
      return true;
    }
  }
".($args['usePoints'] == 'single' ? "
  if(typeof clearPGrid != 'undefined') clearPGrid(geometry);
  replaceGeom(selectedFeature, SitePointLayer, modPointFeature, geometry, false, true);" : "
  if(typeof addPGPoint != 'undefined') addPGPoint(geometry);
  if(selectedFeature.geometry.CLASS_NAME == \"OpenLayers.Geometry.MultiPoint\") {
    modPointFeature.unselectFeature(selectedFeature);
    selectedFeature.geometry.addPoint(geometry);
    modPointFeature.selectFeature(selectedFeature);
    selectFeature.highlight(selectedFeature);
    selectedFeature.attributes.highlighted = true;
    resetVertices();
    setGeomFields();
  } else { // is OpenLayers.Geometry.Point
    var CompoundGeom = new OpenLayers.Geometry.MultiPoint([selectedFeature.geometry, geometry]);
    replaceGeom(selectedFeature, SitePointLayer, modPointFeature, CompoundGeom, false, true);
  }")."
  return true;
}
addDrawnLineToSelection = function(geometry) {
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"  if(ParentLocationLayer.features.length == 0) return;
" : "").
"  var points = geometry.getVertices();
  if(points.length < 2){
    alert(\"".lang::get('LANG_TooFewLinePoints')."\");
    return false;
  }
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"  var centre = getCentroid(geometry);
  if(!ParentLocationLayer.features[0].geometry.intersects(centre))
    alert(\"".lang::get('LANG_LineOutsideParent')."\");
" : "").
(isset($args['oneTypeAtATime']) && $args['oneTypeAtATime'] ?
"  if(modPointFeature.feature) modPointFeature.unselectFeature(modPointFeature.feature);
  if(modAreaFeature.feature) modAreaFeature.unselectFeature(modAreaFeature.feature);
  SitePointLayer.destroyFeatures();
  SiteAreaLayer.destroyFeatures();
" : "").
"  var highlightedFeatures = gethighlight();
".(!$options['AdminMode'] || (isset($args['adminsCanCreate']) && $args['adminsCanCreate']) ? 
"  if(highlightedFeatures.length == 0){
    setDrawnGeom();
    // No currently selected feature. Create a new one.
    feature = addAndSelectNewGeom(SitePathLayer, modPathFeature, geometry, true);
    hook_new_site_added(feature, feature.attributes.SiteNum);
    return true;
  }
" : 
"  if(highlightedFeatures.length == 0) return true;
")."
  var selectedFeature = false;
  for(var i=0; i<highlightedFeatures.length; i++){
    if(highlightedFeatures[i].geometry.CLASS_NAME == \"OpenLayers.Geometry.LineString\" ||
        highlightedFeatures[i].geometry.CLASS_NAME == \"OpenLayers.Geometry.MultiLineString\") {
      selectedFeature = highlightedFeatures[i];
      break;
    }}
  // a site is already selected so the Drawn/Specified state stays unaltered
  if(highlightedFeatures[0].attributes['new'] == true){
    if(!selectedFeature) {
      addToExistingFeatureSet(highlightedFeatures, SitePathLayer, modPathFeature, geometry, true);
      return true;
    }
  } else { // highlighted is existing
    if(highlightedFeatures[0].attributes.canEdit){
      if(!selectedFeature) {
        addToExistingFeatureSet(highlightedFeatures, SitePathLayer, modPathFeature, geometry, true);
        return true;
      }
    } else {
      return true;
    }
  }
  ".($args['useLines'] == 'single' ? "
  replaceGeom(selectedFeature, SitePathLayer, modPathFeature, geometry, true, true);" : "
  if(selectedFeature.geometry.CLASS_NAME == \"OpenLayers.Geometry.MultiLineString\") {
    modPathFeature.unselectFeature(selectedFeature);
    selectedFeature.geometry.addComponents([geometry]);
    modPathFeature.selectFeature(selectedFeature);
    selectFeature.highlight(selectedFeature);
    selectedFeature.attributes.highlighted = true;
    resetVertices();
    setGeomFields();
  } else { // is OpenLayers.Geometry.LineString
    var CompoundGeom = new OpenLayers.Geometry.MultiLineString([selectedFeature.geometry, geometry]);
    replaceGeom(selectedFeature, SitePathLayer, modPathFeature, CompoundGeom, true, true);
  }")."
  return true;
}
addDrawnPolygonToSelection = function(geometry) {
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"  if(ParentLocationLayer.features.length == 0) return;
" : "").
"  var points = geometry.components[0].getVertices();
  if(points.length < 3){
    alert(\"".lang::get('LANG_TooFewPoints')."\");
    return false;
  }
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"  var centre = getCentroid(geometry);
  if(!ParentLocationLayer.features[0].geometry.intersects(centre))
    alert(\"".lang::get('LANG_PolygonOutsideParent')."\");
" : "").
(isset($args['oneTypeAtATime']) && $args['oneTypeAtATime'] ?
"  if(modPointFeature.feature) modPointFeature.unselectFeature(modPointFeature.feature);
  if(modPathFeature.feature) modPathFeature.unselectFeature(modPathFeature.feature);
  SitePointLayer.destroyFeatures();
  SitePathLayer.destroyFeatures();
" : "").
"  var highlightedFeatures = gethighlight();
".(!$options['AdminMode'] || (isset($args['adminsCanCreate']) && $args['adminsCanCreate']) ? 
"  if(highlightedFeatures.length == 0){
    setDrawnGeom();
    // No currently selected feature. Create a new one.
    feature = addAndSelectNewGeom(SiteAreaLayer, modAreaFeature, geometry, true);
    hook_new_site_added(feature, feature.attributes.SiteNum);
    return true;
  }
" : 
"  if(highlightedFeatures.length == 0) return true;
")."
  var selectedFeature = false;
  for(var i=0; i<highlightedFeatures.length; i++){
    if(highlightedFeatures[i].geometry.CLASS_NAME == \"OpenLayers.Geometry.Polygon\" ||
        highlightedFeatures[i].geometry.CLASS_NAME == \"OpenLayers.Geometry.MultiPolygon\") {
      selectedFeature = highlightedFeatures[i];
      break;
    }}
  // a site is already selected so the Drawn/Specified state stays unaltered
  if(highlightedFeatures[0].attributes['new'] == true){
    if(!selectedFeature) {
      addToExistingFeatureSet(highlightedFeatures, SiteAreaLayer, modAreaFeature, geometry, true);
      return true;
    }
  } else { // highlighted is existing
    if(highlightedFeatures[0].attributes.canEdit){
      if(!selectedFeature) {
        addToExistingFeatureSet(highlightedFeatures, SiteAreaLayer, modAreaFeature, geometry, true);
        return true;
      }
    } else {
      return true;
    }
  }
  ".($args['usePolygons'] == 'single' ? "
  replaceGeom(selectedFeature, SiteAreaLayer, modAreaFeature, geometry, true, true);" : "
  if(selectedFeature.geometry.CLASS_NAME == \"OpenLayers.Geometry.MultiPolygon\") {
    modAreaFeature.unselectFeature(selectedFeature);
    selectedFeature.geometry.addComponents([geometry]);
    modAreaFeature.selectFeature(selectedFeature);
    selectFeature.highlight(selectedFeature);
    selectedFeature.attributes.highlighted = true;
    resetVertices();
    setGeomFields();
  } else { // is OpenLayers.Geometry.Polygon
    var CompoundGeom = new OpenLayers.Geometry.MultiPolygon([selectedFeature.geometry, geometry]);
    replaceGeom(selectedFeature, SiteAreaLayer, modAreaFeature, CompoundGeom, true, true);
  }")."
  return true;
}
onFeatureModified = function(evt) {
  var feature = evt.feature;
  switch(feature.geometry.CLASS_NAME){
    case \"OpenLayers.Geometry.Point\":
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"      if(!ParentLocationLayer.features[0].geometry.intersects(feature.geometry))
        alert(\"".lang::get('LANG_PointOutsideParent')."\");
" : "").
"      if(typeof modPGPoint != 'undefined') modPGPoint(feature.geometry);
      break;
    case \"OpenLayers.Geometry.MultiPoint\":
      if(feature.geometry.components.length == 0){
        modPointFeature.unselectFeature(feature);
        SitePointLayer.destroyFeatures([feature]);
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"     } else {
        var centre = getCentroid(feature.geometry);
        if(!ParentLocationLayer.features[0].geometry.intersects(centre))
          alert(\"".lang::get('LANG_PointOutsideParent')."\");
" : "").
"      }
      if(typeof modPGPoint != 'undefined') modPGPoint(feature.geometry);
      break;
    case \"OpenLayers.Geometry.LineString\":
      points = feature.geometry.getVertices();
      if(points.length < 2){
        alert(\"".lang::get('LANG_TooFewLinePoints')."\");
        modPathFeature.unselectFeature(feature);
        SitePathLayer.destroyFeatures([feature]);
      }
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"      else {
        var centre = getCentroid(feature.geometry);
        if(!ParentLocationLayer.features[0].geometry.intersects(centre))
          alert(\"".lang::get('LANG_LineOutsideParent')."\");
      }
" : "").
"      break;
    case \"OpenLayers.Geometry.MultiLineString\":
      for(i=feature.geometry.components.length-1; i>=0; i--) {
        points = feature.geometry.components[i].getVertices();
        if(points.length < 2){
          alert(\"".lang::get('LANG_TooFewLinePoints')."\");
          var selectedFeature = modPathFeature.feature;
          modPathFeature.unselectFeature(selectedFeature);
          selectFeature.unhighlight(selectedFeature);
          SitePathLayer.removeFeatures([selectedFeature]);
          selectedFeature.geometry.removeComponents([feature.geometry.components[i]]);
          SitePathLayer.addFeatures([selectedFeature]);
          modPathFeature.selectFeature(selectedFeature);
          selectFeature.highlight(selectedFeature);
          selectedFeature.attributes.highlighted = true;
        }
      }
      if(feature.geometry.components.length == 0){
        modPathFeature.unselectFeature(feature);
        SitePathLayer.destroyFeatures([feature]);
      }
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"      else {
        var centre = getCentroid(feature.geometry);
        if(!ParentLocationLayer.features[0].geometry.intersects(centre))
          alert(\"".lang::get('LANG_LineOutsideParent')."\");
      }
" : "").
"      break;
    case \"OpenLayers.Geometry.Polygon\": // only do outer ring
      points = feature.geometry.components[0].getVertices();
      if(points.length < 3){
        alert(\"".lang::get('LANG_TooFewPoints')."\");
        modAreaFeature.unselectFeature(feature);
        SiteAreaLayer.destroyFeatures([feature]);
      }
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"      else {
        var centre = getCentroid(feature.geometry);
        if(!ParentLocationLayer.features[0].geometry.intersects(centre))
          alert(\"".lang::get('LANG_CentreOutsideParent')."\");
      }
" : "").
"      break;
    case \"OpenLayers.Geometry.MultiPolygon\":
      for(i=feature.geometry.components.length-1; i>=0; i--) {
        points = feature.geometry.components[i].components[0].getVertices();
        if(points.length < 3){
          alert(\"".lang::get('LANG_TooFewPoints')."\");
          var selectedFeature = modAreaFeature.feature;
          modAreaFeature.unselectFeature(selectedFeature);
          selectFeature.unhighlight(selectedFeature);
          SiteAreaLayer.removeFeatures([selectedFeature]);
          selectedFeature.geometry.removeComponents([feature.geometry.components[i]]);
          SiteAreaLayer.addFeatures([selectedFeature]);
          modAreaFeature.selectFeature(selectedFeature);
          selectFeature.highlight(selectedFeature);
          selectedFeature.attributes.highlighted = true;
        }
      }
      if(feature.geometry.components.length == 0){
        modAreaFeature.unselectFeature(feature);
        SiteAreaLayer.destroyFeatures([feature]);
      }
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"      else {
        var centre = getCentroid(feature.geometry);
        if(!ParentLocationLayer.features[0].geometry.intersects(centre))
          alert(\"".lang::get('LANG_CentreOutsideParent')."\");
      }
" : "").
"      break;
  }
  resetVertices();
  setGeomFields();
}
// TBD should only include next when siteNameTermListID set
setNameDropDowns = function(disable, value){
  jQuery('#dummy-name').find('*').removeAttr('disabled');
  if(disable === true){
  	jQuery('#dummy-name').val('').attr('disabled','disabled');
  	return;
  }
  if(disable === false)
  	jQuery('#dummy-name').removeAttr('disabled');
  if(value===false && jQuery('#dummy-name').val() !== '') value=jQuery('#dummy-name').val()
  if(value !== '')
    jQuery('#dummy-name').find('option').filter('[value=]').attr('disabled','disabled');
  jQuery('#dummy-name').find('option').each(function (index, option){
  // TBD convert this to look at the features.
      if((value == false || jQuery(option).val() != value) &&
          jQuery('.cggrid-row,.cgAddedRow').find('.cggrid-name').filter('[value='+jQuery(option).val()+']').length > 0)
        jQuery(option).attr('disabled','disabled');
  });
  if(value!==false) jQuery('#dummy-name').val(value);
};
/********************************/
/* Define Map Control callbacks */
/********************************/
CancelSketch = function(layer){
  for(var i = editControl.controls.length-1; i>=0; i--)
    if(editControl.controls[i].CLASS_NAME == \"OpenLayers.Control.DrawFeature\" && editControl.controls[i].active)
      editControl.controls[i].cancel();
};
UndoSketchPoint = function(layer){
  for(var i = editControl.controls.length-1; i>=0; i--)
    if(editControl.controls[i].CLASS_NAME == \"OpenLayers.Control.DrawFeature\" && editControl.controls[i].active)
      editControl.controls[i].undo();
};
RemoveNewSite = function(){
  // can only remove the site if highlighted,
  var highlighted = gethighlight();
  if(highlighted.length == 0 || !highlighted[0].attributes['new']) return;
  if(confirm('".lang::get('LANG_ConfirmRemoveDrawnSite')."')){
    if(typeof hook_RemoveNewSite != 'undefined')
      hook_RemoveNewSite();
    clearLocation(true, true);
    removeDrawnGeom(highlighted[0].attributes.SiteNum);
    recalcNumSites();
    setGeomFields();
    if(typeof setNameDropDowns != 'undefined')
      setNameDropDowns(true, false);
  }
};
StartNewSite = function(){
  var keepName=false;
".($args['locationMode']=='parent' ?
"  if(jQuery('#".$options['ChooseParentFieldID']."').val()==''){
    alert('".lang::get('LANG_MustSelectParentFirst')."');
    return;
  };":"")."
".($args['locationMode']=='multi' ?
"  unhighlightAll();
".(isset($args['siteNameTermListID']) && $args['siteNameTermListID'] != '' ?
"  setNameDropDowns(false, '');
" :
"  jQuery('#dummy-name').val('');
") : 
"  keepName = jQuery('#".$options['MainFieldID']."').val() == '';
  // first remove any existing new location.
  var highlighted = gethighlight();
  var found=false;
  // only confirm if have something drawn on map: ie ignore label
  for(i=0; i<highlighted.length; i++) found = found || (highlighted[i].layer != SiteLabelLayer && highlighted[i].attributes['new']==true)
  if(found && !confirm('".lang::get('LANG_ConfirmRemoveDrawnSite')."')) return false;
  if(highlighted.length>0 && highlighted[0].attributes['new']==true) removeDrawnGeom(highlighted[0].attributes.SiteNum); // remove label here
  unhighlightAll();
  jQuery('#".$options['MainFieldID'].",#sample-location-id').val(''); // reset id field.
").
"  setPermissionsNewSite(); // need to leave the location parent id enabled.
  clearLocation(true, !keepName);
  if(jQuery('#dummy-parent-id').length>0 && jQuery('[name=location\\:parent_id]').length>0 &&
      jQuery('#dummy-parent-id').val() != jQuery('[name=location\\:parent_id]').val())
    jQuery('[name=location\\:parent_id]').val(jQuery('#dummy-parent-id').val()).change();
".($creatorAttr ? "  jQuery('[name=locAttr:".$creatorAttr."],[name^=locAttr:".$creatorAttr.":]').val('".$user->name."');\n" : "").
"  // No currently selected feature. Create a dummy label new one.
  SiteNum++;
  hook_new_site_added(false, SiteNum);
  // Programatic activation does not rippleout to deactivate other draw features, so deactivate all first.
  for(var i=0; i<editControl.controls.length; i++)
    if(editControl.controls[i].CLASS_NAME == \"OpenLayers.Control.DrawFeature\")
      editControl.controls[i].deactivate();
  // we assume there is at least one drawing control: activate the first one.
  selectFeature.activate();
  for(var i=0; i<editControl.controls.length; i++){
    if(editControl.controls[i].CLASS_NAME == \"OpenLayers.Control.DrawFeature\"){
      selectFeature.deactivate();
      editControl.controls[i].activate();
      // new site will have no vertices yet...
      return;
    }}
}
ZoomToFeature = function(feature){
  var div = jQuery('#map')[0];
  var bounds=feature.geometry.bounds.clone();
  // extend the boundary to include a buffer, so the map does not zoom too tight.
  var dy = (bounds.top-bounds.bottom) * div.settings.maxZoomBuffer;
  var dx = (bounds.right-bounds.left) * div.settings.maxZoomBuffer;
  bounds.top = bounds.top + dy;
  bounds.bottom = bounds.bottom - dy;
  bounds.right = bounds.right + dx;
  bounds.left = bounds.left - dx;
  if (div.map.getZoomForExtent(bounds) > div.settings.maxZoom) {
    // if showing something small, don't zoom in too far
    div.map.setCenter(bounds.getCenterLonLat(), div.settings.maxZoom);
  } else {
    // Set the default view to show something triple the size of the grid square
    // Assume this is within the map extent
    div.map.zoomToExtent(bounds);
  }
};
ZoomToSite = function(){
  var div = jQuery('#map')[0];
  if(modPointFeature.feature){
    return ZoomToFeature(modPointFeature.feature);}
  if(modPathFeature.feature){
    return ZoomToFeature(modPathFeature.feature);}
  if(modAreaFeature.feature){
    return ZoomToFeature(modAreaFeature.feature);}
  var highlighted = gethighlight();
  if(highlighted.length>0){
    var div = jQuery('#map')[0];
    var bounds=highlighted[0].geometry.bounds.clone();
    $.each(highlighted, function(idx, feat){
      bounds.extend(feat.geometry.bounds);
    });
    // extend the boundary to include a buffer, so the map does not zoom too tight.
    var dy = (bounds.top-bounds.bottom) * div.settings.maxZoomBuffer;
    var dx = (bounds.right-bounds.left) * div.settings.maxZoomBuffer;
    bounds.top = bounds.top + dy;
    bounds.bottom = bounds.bottom - dy;
    bounds.right = bounds.right + dx;
    bounds.left = bounds.left - dx;
    if (div.map.getZoomForExtent(bounds) > div.settings.maxZoom) {
      // if showing something small, don't zoom in too far
      div.map.setCenter(bounds.getCenterLonLat(), div.settings.maxZoom);
    } else {
      // Set the default view to show something triple the size of the grid square
      // Assume this is within the map extent
      div.map.zoomToExtent(bounds);
    }
  }
};
ZoomToParent = function(){
  if(ParentLocationLayer.features.length > 0)
    zoomToLayerExtent(ParentLocationLayer);
};
ZoomToCountry = function(){
	var div = jQuery('#map')[0];
	var center = new OpenLayers.LonLat(".$args['map_centroid_long'].",".$args['map_centroid_lat'].");
	center.transform(div.map.displayProjection, div.map.projection);
	div.map.setCenter(center, ".((int) $args['map_zoom']).");
}
/***********************************/
/* Define Controls for use on Map. */
/***********************************/
selectFeatureActivate = function(){
    if(modAreaFeature.feature) modAreaFeature.unselectFeature(modAreaFeature.feature);
    if(modPathFeature.feature) modPathFeature.unselectFeature(modPathFeature.feature);
    if(modPointFeature.feature) modPointFeature.unselectFeature(modPointFeature.feature);
    modAreaFeature.deactivate();
    modPathFeature.deactivate();
    modPointFeature.deactivate();
    resetVertices();
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"    if(!ParentLocationLayer.features.length) {
      selectFeature.deactivate();
      return false;
    }
" : "").
"    return true;
};
polygonDrawActivate = function(){
  if(modPointFeature.feature) modPointFeature.unselectFeature(modPointFeature.feature);
  if(modPathFeature.feature) modPathFeature.unselectFeature(modPathFeature.feature);
  selectFeature.deactivate();
  modPointFeature.deactivate();
  modPathFeature.deactivate();
  resetVertices();
".($args['locationMode']!='single'  && $args['locationMode']!='filtered' ?
"  if(!ParentLocationLayer.features.length) {
    polygonDraw.deactivate();
    return false;
  }
" : "").
"  highlighted = gethighlight();
  if(highlighted.length == 0){
".(!$options['AdminMode'] || (isset($args['adminsCanCreate']) && $args['adminsCanCreate']) ?
"    modAreaFeature.activate();
    return true;
  }
  if(highlighted[0].attributes['new'] == true){
    modAreaFeature.activate();
    for(var i=0; i<SiteAreaLayer.features.length; i++){
      if(SiteAreaLayer.features[i].attributes.highlighted == true){
        modAreaFeature.selectFeature(SiteAreaLayer.features[i]);}}
    resetVertices();
    return true;
" : 
"    polygonDraw.deactivate();
    selectFeature.activate();
    return false;
")."  }
  // highlight feature is an existing one.
  if(highlighted[0].attributes.canEdit){
    modAreaFeature.activate();
    for(var i=0; i<SiteAreaLayer.features.length; i++){
      if(SiteAreaLayer.features[i].attributes.highlighted == true){
        modAreaFeature.selectFeature(SiteAreaLayer.features[i]);}}
    resetVertices();
    return true;
  }
  polygonDraw.deactivate();
  selectFeature.activate();
  return false;
};
lineDrawActivate = function(){
  if(modPointFeature.feature) modPointFeature.unselectFeature(modPointFeature.feature);
  if(modAreaFeature.feature) modAreaFeature.unselectFeature(modAreaFeature.feature);
  selectFeature.deactivate();
  modPointFeature.deactivate();
  modAreaFeature.deactivate();
  resetVertices();
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"  if(!ParentLocationLayer.features.length) {
    lineDraw.deactivate();
    return false;
  }
" : "").
"  highlighted = gethighlight();
  if(highlighted.length == 0){
".(!$options['AdminMode'] || (isset($args['adminsCanCreate']) && $args['adminsCanCreate']) ?
"    modPathFeature.activate();
    return true;
  }
  if(highlighted[0].attributes['new'] == true){
    modPathFeature.activate();
    for(var i=0; i<SitePathLayer.features.length; i++){
      if(SitePathLayer.features[i].attributes.highlighted == true){
        modPathFeature.selectFeature(SitePathLayer.features[i]);}}
    resetVertices();
    return true;
" : 
"    lineDraw.deactivate();
    selectFeature.activate();
    return false;
")."  }
  // highlight feature is an existing one.
  if(highlighted[0].attributes.canEdit){
    modPathFeature.activate();
    for(var i=0; i<SitePathLayer.features.length; i++){
      if(SitePathLayer.features[i].attributes.highlighted == true){
        modPathFeature.selectFeature(SitePathLayer.features[i]);}}
    resetVertices();
    return true;
  }
  lineDraw.deactivate();
  selectFeature.activate();
  return false;
};
pointDrawDeactivate = function(){
  if(typeof removePopups != 'undefined') removePopups();
  jQuery(\"#pointgrid\").hide();
};
pointDrawActivate = function(){
  jQuery(\"#pointgrid\").show();
  if(modAreaFeature.feature) modAreaFeature.unselectFeature(modAreaFeature.feature);
  if(modPathFeature.feature) modPathFeature.unselectFeature(modPathFeature.feature);
  selectFeature.deactivate();
  modAreaFeature.deactivate();
  modPathFeature.deactivate();
  resetVertices();
".($args['locationMode']!='single' && $args['locationMode']!='filtered' ?
"  if(!ParentLocationLayer.features.length) {
    pointDraw.deactivate();
    return false;
  }
" : "").
"  highlighted = gethighlight();
  if(highlighted.length == 0){
".(!$options['AdminMode'] || (isset($args['adminsCanCreate']) && $args['adminsCanCreate']) ?
"    modPointFeature.activate();
    return true;
  }
  if(highlighted[0].attributes['new'] == true){
    modPointFeature.activate();
    for(var i=0; i<SitePointLayer.features.length; i++){
      if(SitePointLayer.features[i].attributes.highlighted == true){
        modPointFeature.selectFeature(SitePointLayer.features[i]);
        resetVertices();}}
    if(typeof populatePGrid != 'undefined') populatePGrid();
    return true;
" : 
"    pointDraw.deactivate();
    selectFeature.activate();
    return false;
")."  }
  // highlight feature is an existing one.
  if(highlighted[0].attributes.canEdit){
    modPointFeature.activate();
    for(var i=0; i<SitePointLayer.features.length; i++){
      if(SitePointLayer.features[i].attributes.highlighted == true){
        modPointFeature.selectFeature(SitePointLayer.features[i]);
        resetVertices();}}
    if(typeof populatePGrid != 'undefined') populatePGrid();
    return true;
  }
  pointDraw.deactivate();
  selectFeature.activate();
  return false;
};
MyEditingToolbar=OpenLayers.Class(
		OpenLayers.Control.Panel,{
			initialize:function(layer,options){
				OpenLayers.Control.Panel.prototype.initialize.apply(this,[options]);
				this.addControls([selectFeature
".($args['usePolygons'] != 'none' ? "				         ,polygonDraw
" : '').
($args['useLines'] != 'none' ? "				         ,lineDraw
" : '').
($args['usePoints'] != 'none' ? "				         ,pointDraw
" : '').
(($args['usePolygons'] != 'none' || $args['useLines'] != 'none') ? "				         ,new OpenLayers.Control.Button({displayClass: \"olControlCancelSketch\", trigger: CancelSketch, title: '".lang::get('LANG_CancelSketchTooltip')."'})
				         ,new OpenLayers.Control.Button({displayClass: \"olControlUndoSketchPoint\", trigger: UndoSketchPoint, title: '".lang::get('LANG_UndoSketchPointTooltip')."'})
" : '').
(!$options['AdminMode'] || (isset($args['adminsCanCreate']) && $args['adminsCanCreate']) ? "				         ,new OpenLayers.Control.Button({displayClass: \"olControlRemoveNewSite\", trigger: RemoveNewSite, title: '".lang::get('LANG_RemoveNewSite')."'})
				         ,new OpenLayers.Control.Button({displayClass: \"olControlStartNewSite\", trigger: StartNewSite, title: '".lang::get('LANG_StartNewSite')."'})
" : '').
"				         ,new OpenLayers.Control.Button({displayClass: \"olControlZoomToSite\", trigger: ZoomToSite, title: '".lang::get('LANG_ZoomToSite')."'})
".($args['locationMode'] != 'single' /* && $args['locationMode']!='filtered' */ ? "				         ,new OpenLayers.Control.Button({displayClass: \"olControlZoomToSquare\", trigger: ZoomToParent, title: '".lang::get('LANG_ZoomToParent')."'})
" : '').
"				         ,new OpenLayers.Control.Button({displayClass: \"olControlZoomToCountry\", trigger: ZoomToCountry, title: '".lang::get('LANG_ZoomToCountry')."'})
				         ]);
	},
	CLASS_NAME:\"MyEditingToolbar\"});
deactivateControls = function(){
  if(typeof editControl != 'undefined'){
    for(var i = editControl.controls.length-1; i>=0; i--){
      if(editControl.controls[i].CLASS_NAME == \"OpenLayers.Control.DrawFeature\" ||
         editControl.controls[i].CLASS_NAME == \"OpenLayers.Control.SelectFeature\") {
        editControl.controls[i].deactivate();
    }}}
};
setSpecifiedLocation = function() {
  var highlighted = gethighlight();
  if(highlighted[0].attributes.canEdit){
    setPermissionsOldEditableSite(false);
  } else {
    // need to leave the location parent id enabled. Don't need to set geometries as we are using an existing location.
    setPermissionsOldReadOnlySite();
  }
}
onFeatureSelect = function(evt) {
  var feature = evt.feature;
  if(feature.attributes.highlighted==true) return false;
".($args['locationMode']=='multi' ?
"  unhighlightAll();
" :
"  var willRemove = false;
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features);
  for(var i=0; i<allFeatures.length; i++)
    willRemove = willRemove || (allFeatures[i].attributes['new']==true);
  if(willRemove && !confirm('".lang::get('LANG_ConfirmRemoveDrawnSite')."')) return false;
  var highlighted = gethighlight();
  if(highlighted.length > 0 && highlighted[0].attributes['new'])
    removeDrawnGeom(highlighted[0].attributes.SiteNum);
  else
    // Any highlighted existing features should be unhighlighted.
    unhighlightAll();
  jQuery(\"#".$options['MainFieldID'].",#sample-location-id\").val(feature.attributes.data.id);
").
"  ZoomToFeature(feature);
  // now highlight the new ones
  highlightMe(false, feature.attributes.SiteNum); // need to fetch SiteNum in case highlight new.
  loadLocation(feature);
  return false;
}
modAreaFeature = new OpenLayers.Control.ModifyFeature(SiteAreaLayer,{standalone: true});
modPathFeature = new OpenLayers.Control.ModifyFeature(SitePathLayer,{standalone: true});
modPointFeature = new OpenLayers.Control.ModifyFeature(SitePointLayer,{standalone: true});
selectFeature = new OpenLayers.Control.SelectFeature([SiteAreaLayer,SitePathLayer,SitePointLayer,SiteLabelLayer],{'displayClass':'olControlSelectFeature', title: '".lang::get('LANG_SelectTooltip')."'});
selectFeature.events.on({'activate': selectFeatureActivate});
polygonDraw = new OpenLayers.Control.DrawFeature(SiteAreaLayer,OpenLayers.Handler.Polygon,{'displayClass':'olControlDrawFeaturePolygon', drawFeature: addDrawnPolygonToSelection, title: '".lang::get('LANG_PolygonTooltip')."'});
polygonDraw.events.on({'activate': polygonDrawActivate});
lineDraw = new OpenLayers.Control.DrawFeature(SitePathLayer,OpenLayers.Handler.Path,{'displayClass':'olControlDrawFeaturePath', drawFeature: addDrawnLineToSelection, title: '".lang::get('LANG_LineTooltip')."'});
lineDraw.events.on({'activate': lineDrawActivate});
pointDraw = new OpenLayers.Control.DrawFeature(SitePointLayer,OpenLayers.Handler.Point,{'displayClass':'olControlDrawFeaturePoint', drawFeature: addDrawnPointToSelection, title: '".lang::get('LANG_PointTooltip')."'});
pointDraw.events.on({'activate': pointDrawActivate, 'deactivate': pointDrawDeactivate});
editControl = new MyEditingToolbar(SiteAreaLayer, {allowDepress: false, 'displayClass':'olControlEditingToolbar'});

mapInitialisationHooks.push(function(mapdiv) {
	// try to identify if this map is the main one
	if(mapdiv.id=='map'){
		mapdiv.map.addControl(modAreaFeature);
		mapdiv.map.addControl(modPathFeature);
		mapdiv.map.addControl(modPointFeature);
		modAreaFeature.deactivate();
		modPathFeature.deactivate();
		modPointFeature.deactivate();
		mapdiv.map.addControl(editControl);
".(isset($args['mousePosControl']) && $args['mousePosControl'] ? "		jQuery('.olControlEditingToolbar').append('<span id=\"mousePos\"></span>');
		var mousePosCtrl = new OpenLayers.Control.MousePosition({
		  div: document.getElementById('mousePos'),
		  prefix: 'LUREF:',
		  displayProjection: new OpenLayers.Projection('EPSG:2169'),
		  emptyString: '',
		  numDigits: 0 
		});
		mapdiv.map.addControl(mousePosCtrl);
" : "").
"		editControl.activate();
		if(SiteAreaLayer.map.editLayer){
			SiteAreaLayer.map.editLayer.clickControl.deactivate();
			SiteAreaLayer.map.editLayer.destroyFeatures();
		}
		mapdiv.map.events.on({'zoomend': function(){
		  if(jQuery('#map')[0].map.zoom >= ".$args['labelZoomLevel']."){
		    if(!SiteLabelLayer.getVisibility())
		      SiteLabelLayer.setVisibility(true);
		  } else {
	 	   if(SiteLabelLayer.getVisibility())
	 	     SiteLabelLayer.setVisibility(false);
	 	 }
		}});
		mapdiv.map.events.triggerEvent('zoomend');
";
	// If entity to load is set, then we are highlighting an existing location, can't modify, but can start drawing another site.
    if(isset(data_entry_helper::$entity_to_load['location:id'])){
      switch($args['locationMode']){
        // TBD fieldname should be ParentFieldName
        case 'multi':
    		data_entry_helper::$javascript .= "		loadFeatures(".data_entry_helper::$entity_to_load['sample:location_id'].",'',{initial: true}, true, true, true, true, true);\n";
    		break;
    	case 'single':
    		data_entry_helper::$javascript .= "		loadFeatures('',".data_entry_helper::$entity_to_load['location:id'].",{initial: true}, false, false, false, false, true);\n";
      		break;
    	case 'filtered':
            $activeParent = false;
            $filterAttrs = explode(',',$args['filterAttrs']);
            foreach($filterAttrs as $idx=>$filterAttr){
              $filterAttr=explode(':',$filterAttr);
              if($filterAttr[0] == 'Parent' && $filterAttr[1] == "true")
                $activeParent = true;
            }
            if($activeParent)
              data_entry_helper::$javascript .= "		loadFeatures(".data_entry_helper::$entity_to_load['location:parent_id'].",".data_entry_helper::$entity_to_load['location:id'].",{initial: true}, true, false, false, false, true);\n";
            else
              data_entry_helper::$javascript .= "		loadFeatures('',".data_entry_helper::$entity_to_load['location:id'].",{initial: true}, false, false, false, false, true);\n";
      		break;
    	default: // mode = parent
      		data_entry_helper::$javascript .= "		loadFeatures(".data_entry_helper::$entity_to_load['location:parent_id'].",".data_entry_helper::$entity_to_load['location:id'].",{initial: true}, true, true, false, false, true);\n"; 
      }
    } else if($args['locationMode']=='single'){
      data_entry_helper::$javascript .= "		loadFeatures('','',{initial: true}, false, false, false, true, true);\n";
    } else if($args['locationMode']=='filtered'){
      $activeParent = false;
      $filterAttrs = explode(',',$args['filterAttrs']);
      foreach($filterAttrs as $idx=>$filterAttr){
        $filterAttr=explode(':',$filterAttr);
        if($filterAttr[0] == 'Parent' && $filterAttr[1] == "true")
          $activeParent = true;
      }
      if(!$activeParent)
        data_entry_helper::$javascript .= "		loadFeatures('','',{initial: true}, false, false, false, true, false);\n";
    } else { // either multi, parent with none specified at the moment.
      data_entry_helper::$javascript .= "		setPermissionsNoParent();\n";
    }
    data_entry_helper::$javascript .= "}});
SiteLabelLayer.events.on({
    'beforefeatureselected': onFeatureSelect
  });
SiteAreaLayer.events.on({
    'beforefeatureselected': onFeatureSelect
    ,'featuremodified': onFeatureModified
  });
SitePathLayer.events.on({
    'beforefeatureselected': onFeatureSelect
    ,'featuremodified': onFeatureModified
  });
SitePointLayer.events.on({
    'beforefeatureselected': onFeatureSelect
    ,'featuremodified': onFeatureModified
  });
";
    if($args['locationMode']!='multi'){
      data_entry_helper::$javascript .= "
hook_ChildFeatureLoad = function(feature, data, child_id, childArgs){
  if(child_id == '' || data.id != child_id){\n";
      if($args['locationMode']!='filtered' && isset($args['duplicateNameCheck']) && $args['duplicateNameCheck']=='enforce'){
        data_entry_helper::$javascript .= "    var clearVal = jQuery('#location-name').val() == data.name;\n"; 
        if($args['siteNameTermListID']!="")
          data_entry_helper::$javascript .= "    jQuery('#location-name').find('option').filter('[value='+data.name+']').attr('disabled','disabled');\n";
        data_entry_helper::$javascript .= "    if(clearVal) jQuery('#location-name').val('');\n";
      }
      data_entry_helper::$javascript .= "    return;
  }
  var pointFeature = false;
  var lineFeature = false;
  var areaFeature = false;
  if(typeof(feature)=='object'&&(feature instanceof Array)){
    for(var j=0; j< feature.length; j++){
      switch(feature[j].geometry.CLASS_NAME){
        case \"OpenLayers.Geometry.Point\":
        case \"OpenLayers.Geometry.MultiPoint\":
          pointFeature = feature[j];
          break;
        case \"OpenLayers.Geometry.LineString\":
        case \"OpenLayers.Geometry.MultiLineString\":
          lineFeature = feature[j];
          break;
        default:
          areaFeature = feature[j];
          break;
      }
    }
  } else {
    switch(feature.geometry.CLASS_NAME){
      case \"OpenLayers.Geometry.Point\":
      case \"OpenLayers.Geometry.MultiPoint\":
        pointFeature = feature;
        break;
      case \"OpenLayers.Geometry.LineString\":
      case \"OpenLayers.Geometry.MultiLineString\":
        lineFeature = feature;
        break;
      default:
        areaFeature = feature;
      break;
    }
  }
  var Zoomed=false;
  if(areaFeature) {
    areaFeature.attributes.highlighted=true;
    selectFeature.highlight(areaFeature);
    ZoomToFeature(areaFeature);
    Zoomed=true;
  }
  if(lineFeature) {
    lineFeature.attributes.highlighted=true;
    selectFeature.highlight(lineFeature);
    if(!Zoomed) ZoomToFeature(lineFeature);
    Zoomed=true;
  }
  if(pointFeature) {
    pointFeature.attributes.highlighted=true;
    selectFeature.highlight(pointFeature);
    if(!Zoomed) ZoomToFeature(pointFeature);
  }
//  setGeomFields();
};
jQuery('#location-name').change(function(){";
      if($args['locationMode']!='filtered' && isset($args['duplicateNameCheck']) && ($args['duplicateNameCheck']==true || $args['duplicateNameCheck']=='check' || $args['duplicateNameCheck']=='enforce'))
        data_entry_helper::$javascript .= "
  for(var i=0; i< SiteLabelLayer.features.length; i++){
    if(SiteLabelLayer.features[i].attributes['new'] == false){
      if(jQuery(this).val() == SiteLabelLayer.features[i].attributes.data.name){
        alert(\"".lang::get('LANG_DuplicateName')."\");
".($args['duplicateNameCheck']=='enforce' ? "		 jQuery(this).val('');\n" : "")."      }
    }
  }";
      data_entry_helper::$javascript .= "
  jQuery('#sample-location-name').val(jQuery(this).val());
});
jQuery('#location-id').change(function(){
  jQuery('#sample-location-id').val(jQuery(this).val());
  });
//  jQuery(\"#location-name\").val('');
// In order to change this value, there must be a list of values: therefore the parent has been filled in
// With a parent filled in, there are 3 states
// If nothing is selected, then the mod control allows selection of an existing feature, or the draw controls allow the creation of a new site.
// With a new site in progress, then the mod control allows modification of the new site or selection of an existing feature, or the draw controls allow the additional of elements to the new site.
// With a existing site selected, then the mod control allows selection of a different existing feature, or the draw controls allow the creation of a new site.
// the state of the mod and draw controls re enabling stays the same before and afterwards.
mainFieldChange = function(resetName){
  // this is only used when not multisite.
  var highlighted = gethighlight();
  var found=false;
  var myVal = jQuery('#".$options['MainFieldID']."').val();
  // only confirm if have something drawn on map: ie ignore label
  for(i=0; i<highlighted.length; i++){
    if(highlighted[i].layer != SiteLabelLayer && highlighted[i].attributes['new']==true)
      found=true;
  }
  if(found){
    if(!confirm('".lang::get('LANG_ConfirmRemoveDrawnSite')."')) return false;
  }
  if(highlighted.length>0 && highlighted[0].attributes['new']==true){
    removeDrawnGeom(highlighted[0].attributes.SiteNum);
  }
  jQuery('#sample-location-id').val(myVal);
  unhighlightAll();
  pointDraw.deactivate();
  lineDraw.deactivate();
  polygonDraw.deactivate();
  selectFeature.activate();
  setPermissionsNoSite();
  if(myVal=='') {
    clearLocation(true, resetName);
    return;
  }
  // at this point we have selected an existing site.
  highlightMe(myVal, false);
  ZoomToSite();
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features);
  for(var i=0; i<allFeatures.length; i++){
    if(typeof allFeatures[i].attributes.data != 'undefined' &&
        typeof allFeatures[i].attributes.data.id != 'undefined' &&
        allFeatures[i].attributes.data.id == myVal){
      loadLocation(allFeatures[i]); // sets permissions.
      return;
    }
  }
  clearLocation(true, true);
}
jQuery('#".$options['MainFieldID']."').change(function(){mainFieldChange(true)});
";
    }
    if($args['locationMode']=='multi' && isset(data_entry_helper::$entity_to_load["sample:updated_by_id"])){ // only set if data loaded from db, not error condition
      iform_mnhnl_set_editable($auth, $args, $node, array(), $options['AdminMode'], $loctypeParam);
      // TBD sort 2169 hardcode
      // this required when adding sites when editting existing samples
      $retVal .= "<input type=\"hidden\" id=\"imp-sref-system\" name=\"location:centroid_sref_system\" value=\"2169\" >";
      // multiple site: parent sample points to parent location in location_id, not parent_id. Each site has own subsample.
      // can not change the (parent) location of the main sample, as this will reset all the attached samples and sites, so rendering entered data useless. Just delete.
      return $retVal."\n<input type=\"hidden\" name =\"sample:location_id\" value=\"".data_entry_helper::$entity_to_load["sample:location_id"]."\" >
  <p>".$options['ParentLabel'].' : '.data_entry_helper::$entity_to_load["location:name"].'</p>
'.($args['includeNumSites'] ? "<label for=\"dummy-num-sites\" class=\"auto-width\">".lang::get('LANG_NumSites').":</label> <input id=\"dummy-num-sites\" name=\"dummy:num-sites\" class=\"checkNumSites narrow\" readonly=\"readonly\"><br />\n" : '').
"<p>".$options['Instructions2']."</p>\n".($options['AdminMode'] && (!isset($args['adminsCanCreate']) || !$args['adminsCanCreate']) ? '<p>'.lang::get('LANG_LocModTool_CantCreate').'</p>' : '' ).
        ($args['siteNameTermListID']== '' ? "<label for=\"dummy-name\">".$options['NameLabel'].":</label> <input id=\"dummy-name\" name=\"dummy:name\" class='wide required'><br />\n" :
          data_entry_helper::select(array(
            'label'=>$options['NameLabel'],
            'id'=>'dummy-name',
            'fieldname'=>'dummy:name',
            'table'=>'termlists_term',
            'captionField'=>'term',
            'valueField'=>'term',
            'blankText'=>'',
            'class'=>'checkGrid',
            'extraParams' => $auth['read'] + array('termlist_id'=>$args['siteNameTermListID'], 'orderby'=>'id'))));
    }
    $retVal .= "<input type='hidden' id=\"sample-location-name\" name=\"sample:location_name\" value=\"".htmlspecialchars(data_entry_helper::$entity_to_load['sample:location_name'])."\" />";
    if($args['includeLocTools'] && function_exists('iform_loctools_listlocations')){
      $locations = iform_loctools_listlocations($node);
    } else $locations = 'all';
    if($args['locationMode'] == 'parent' || $args['locationMode'] == 'multi'){
      if (!isset($args['loctoolsLocTypeID'])) return "locationMode == parent, loctoolsLocTypeID not set.";
      iform_mnhnl_set_editable($auth, $args, $node, array(), $args['locationMode'] == 'parent' ? "conditional" : $options['AdminMode'], $loctypeParam);
      $locOptions = array('validation' => array('required'), // assume as parents they don't change, so cache data
    					'label'=>$options['ChooseParentLabel'],
    					'id'=>$options['ChooseParentFieldID'],
    					'table'=>'location',
    					'fieldname'=>$options['ChooseParentFieldName'],
    					'valueField'=>'id',
    					'captionField'=>'name',
    					'template' => 'select',
    					'itemTemplate' => 'select_item',
    					'columns'=>'id,name', // Only need certain columns, not geoms which would mean lots of network traffic
    					'extraParams'=>array_merge($auth['read'],
    						array('parent_id'=>'NULL',
    								'view'=>'detail',
    								'orderby'=>'name',
    								'location_type_id'=>$args['loctoolsLocTypeID'],
    								'deleted'=>'f')));
      $locResponse = data_entry_helper::get_population_data($locOptions); 
      if (isset($locResponse['error'])) return "PARENT LOOKUP ERROR:  ".$locResponse['error'];
      $opts = "";
      if (!isset(data_entry_helper::$entity_to_load[$options['ParentFieldName']]))
        $opts = str_replace(array('{value}', '{caption}', '{selected}'),
                         array('', htmlentities(lang::get('LANG_CommonParentBlank')), ''),
                         $indicia_templates[$locOptions['itemTemplate']]);
      foreach ($locResponse as $record) {
        $include=false;
        if($locations == 'all') $include = true;
        else if(in_array($record["id"], $locations)) $include = true;
        if($include == true){
          $opts .= str_replace(array('{value}', '{caption}', '{selected}'),
                             array($record[$locOptions['valueField']],
                                   htmlentities($record[$locOptions['captionField']]),
                                   isset(data_entry_helper::$entity_to_load[$options['ParentFieldName']]) ? (data_entry_helper::$entity_to_load[$options['ParentFieldName']] == $record[$locOptions['valueField']] ? 'selected=selected' : '') : ''),
                             $indicia_templates[$locOptions['itemTemplate']]);
        }
      }
      $locOptions['items'] = $opts;
      $retVal .= '<p>'.$options['Instructions1'].'</p>'.
        data_entry_helper::apply_template($locOptions['template'], $locOptions).
        ($args['includeNumSites'] ? '<label for="dummy-num-sites" class="auto-width">'.lang::get('LANG_NumSites').':</label> <input id="dummy-num-sites" name="dummy:num-sites" class="checkNumSites narrow" readonly="readonly"><br />
' : '').'<p>'.$options['Instructions2'].'</p>'.
      ($options['AdminMode'] && (!isset($args['adminsCanCreate']) || !$args['adminsCanCreate']) ? '<p>'.lang::get('LANG_LocModTool_CantCreate').'</p>' : '' );
    }
    if($args['locationMode']=='parent'){
      $retVal .= "<input type='hidden' id=\"sample-location-id\" name=\"sample:location_id\" value='".data_entry_helper::$entity_to_load['sample:location_id']."' />";
      data_entry_helper::$javascript .= "
jQuery(\"#".$options['ChooseParentFieldID']."\").change(function(){
  jQuery(\"#imp-geom,#imp-boundary-geom,#imp-sref,#imp-srefX,#imp-srefY,#".$options['MainFieldID'].",#".$options['ParentFieldID'].",#sample-location-id,#location-name,#sample-location-name\").val('');
  jQuery(\"#location_location_type_id\").val('$primary');
  loadFeatures(this.value, '', {initial: false}, true, true, true, true, true);
  if(typeof hook_mnhnl_parent_changed != 'undefined')
    hook_mnhnl_parent_changed();
});
jQuery(\"#".$options['ParentFieldID']."\").change(function(){
  if(jQuery(this).val() != '') {
    // we have a new parent location, so draw boundary
    jQuery.getJSON(\"".data_entry_helper::$base_url."/index.php/services/data/location/\"+jQuery(this).val()+\"?mode=json&view=detail&auth_token=".$auth['read']['auth_token']."&nonce=".$auth['read']["nonce"]."&callback=?\",
      function(data) {
       if (data.length>0) {
         var parser = new OpenLayers.Format.WKT();
         if(data[0].boundary_geom){ // only one location if any
           var feature = parser.read(data[0].boundary_geom)
           feature=convertFeature(feature, $('#map')[0].map.projection);
           ParentLocationLayer.destroyFeatures();
           ParentLocationLayer.addFeatures([feature]);
           zoomToLayerExtent(ParentLocationLayer);
         }
       }});
".($options['AdminMode'] ? 
"    // in admin mode we have to reset the location name drop downs.
    jQuery('#location-name').find('option').removeAttr('disabled');
".(isset($args['duplicateNameCheck']) && ($args['duplicateNameCheck']==true || $args['duplicateNameCheck']=='check' || $args['duplicateNameCheck']=='enforce') ?
"    jQuery.getJSON(\"".data_entry_helper::$base_url."/index.php/services/data/location?parent_id=\"+jQuery(this).val()+\"&location_type_id".$primary."&mode=json&view=detail&auth_token=".$auth['read']['auth_token']."&nonce=".$auth['read']["nonce"]."&callback=?\",
      function(data) {
        if (data.length>0) {
          var currentName = jQuery('#location-name').val();
          var currentID = jQuery('#".$options['MainFieldID']."').val();
          // first check if there is a clash and give a warning
          for(var di=0; di<data.length; di++){
            if(currentName == data[di].name && currentID != data[di].id && currentID != ''){
              alert(\"".lang::get('This site name is already in use in the new square. Please choose another.')."\");
              break; // only display one message
            }
          }
".($args['duplicateNameCheck']=='enforce' ?
"          // if enforce, disable all options for existing and reset the name value if needed.
          for(var di=0; di<data.length; di++){
            if(data[di].name == parseInt(data[di].name) && currentID != data[di].id)
              // only disable fields for existing locations for numeric names and which are not me. 
              jQuery('#location-name').find('option').filter('[value='+data[di].name+']').attr('disabled','disabled');
          }
          // finally if enforce and there is a clash, reset the value. This will then automatically take first available.
          for(var di=0; di<data.length; di++){
            if(currentName == data[di].name && currentID != data[di].id)
              jQuery('#location-name').val('');
          }
": "")."
       }});\n" : "") : "").
"  } else
    ParentLocationLayer.destroyFeatures();
});
";
      // choose a single site from a parent, so built site selector drop down.
      // parent uses ID locModTool
      $opts = "";
      $locOptions = array('label'=>$options['MainFieldLabel'],
    					'id'=>$options['MainFieldID'],
    					'table'=>'location',
    					'fieldname'=>$options['MainFieldName'], // 'sample:location_id'
    					'valueField'=>'id',
    					'captionField'=>'name',
    					'template' => 'select',
    					'itemTemplate' => 'select_item',
      		            'nocache' => true,
    					'extraParams'=>array_merge($auth['read'],
    						array('parent_id'=>data_entry_helper::$entity_to_load["location:parent_id"],
    								'view'=>'detail',
    								'orderby'=>'name',
    								'location_type_id'=>$loctypeParam,
    								'deleted'=>'f')));
      if(isset(data_entry_helper::$entity_to_load["sample:id"])){ // if preloaded, then drop down is dependant on value in parent field: if not then get user to enter parent first
        $response = data_entry_helper::get_population_data($locOptions); // OK as parent_id filled in: not likely to be large number.
        if (isset($response['error'])) return "CHILD LOOKUP ERROR:  ".$response['error'];
        $opts .= str_replace(array('{value}', '{caption}', '{selected}'),
                         array('', htmlentities(lang::get('LANG_CommonEmptyLocationID')), ''),
                         $indicia_templates[$locOptions['itemTemplate']]);
        foreach ($response as $record) {
          $caption = htmlspecialchars($record[$locOptions['captionField']]); // it will be extended using a attribute template by JS
          $opts .= str_replace(array('{value}', '{caption}', '{selected}'),
                               array($record[$locOptions['valueField']], htmlentities($caption),
                                     isset(data_entry_helper::$entity_to_load['location:id']) ? (data_entry_helper::$entity_to_load['sample:location_id'] == $record[$locOptions['valueField']] ? 'selected=selected' : '') : ''),
                               $indicia_templates[$locOptions['itemTemplate']]);
        }
      } else {
        $opts = "<option >".lang::get("LANG_CommonChooseParentFirst")."</option>";
      }
      $locOptions['items'] = $opts;
      // single site requires all location data in main form. Mult site must have array: depends on implementation so left to actual form.
      $retVal .= data_entry_helper::apply_template($locOptions['template'], $locOptions)."<br />";
      
      if($options['AdminMode']){
        $locOptions = array('validation' => array('required'),
    					'label'=>$options['ParentLabel'],
    					'id'=>$options['ParentFieldID'],
    					'fieldname'=>$options['ParentFieldName'],
    					'valueField'=>'id',
    					'captionField'=>'name',
    					'template' => 'select',
    					'itemTemplate' => 'select_item');
        $opts = str_replace(array('{value}', '{caption}', '{selected}'),
                         array('', '', ''),
                         $indicia_templates[$locOptions['itemTemplate']]);
        foreach ($locResponse as $record) {
          $include=false;
          if($locations == 'all') $include = true;
          else if(in_array($record["id"], $locations)) $include = true;
          if($include == true){
            $opts .= str_replace(array('{value}', '{caption}', '{selected}'),
                             array($record[$locOptions['valueField']],
                                   htmlentities($record[$locOptions['captionField']]),
                                   isset(data_entry_helper::$entity_to_load[$options['ParentFieldName']]) ? (data_entry_helper::$entity_to_load[$options['ParentFieldName']] == $record[$locOptions['valueField']] ? 'selected=selected' : '') : ''),
                             $indicia_templates[$locOptions['itemTemplate']]);
          }
        }
        $locOptions['items'] = $opts;
        $retVal .= data_entry_helper::apply_template($locOptions['template'], $locOptions);
      } else {
        $retVal .= "<input type='hidden' id=\"".$options['ParentFieldID']."\" name=\"".$options['ParentFieldName']."\" value=\"".(isset(data_entry_helper::$entity_to_load[$options['ParentFieldName']]) ? data_entry_helper::$entity_to_load[$options['ParentFieldName']] : "")."\" />";
      }
      if($args['siteNameTermListID']== '') {
        $retVal .= "<label for=\"location-name\">".$options['NameLabel'].":</label> <input type='text' id=\"location-name\" name=\"location:name\" class='required wide' value=\"".htmlspecialchars(data_entry_helper::$entity_to_load['location:name'])."\" /><span class='deh-required'>*</span><br/>";
      } else {
        $retVal .= data_entry_helper::select(array(
            'label'=>$options['NameLabel'], 
            'id'=>'location-name',
            'fieldname'=>'location:name',
            'table'=>'termlists_term',
            'captionField'=>'term',
            'valueField'=>'term',
            'extraParams' => $auth['read'] + array('termlist_id'=>$args['siteNameTermListID'], 'orderby'=>'id')
        ));
      }
    } else if($args['locationMode'] == 'multi'){
      //TBD sort 2169 hardcode
      $retVal .= "<input type=\"hidden\" id=\"imp-sref-system\" name=\"location:centroid_sref_system\" value=\"2169\" >";
      // multiSite needs the location name.
      if($args['siteNameTermListID']== '') {
        $retVal .= "<label for=\"dummy-name\">".$options['NameLabel'].":</label> <input type='text' id=\"dummy-name\" name=\"dummy:name\" class='wide' value=\"".htmlspecialchars(data_entry_helper::$entity_to_load['location:name'])."\" /><span class='deh-required'>*</span><br/>";
      } else {
        $retVal .= data_entry_helper::select(array(
          'label'=>$options['NameLabel'], 
          'id'=>'dummy-name',
          'fieldname'=>'dummy:name',
          'table'=>'termlists_term',
          'captionField'=>'term',
          'valueField'=>'term',
          'blankText'=>'',
          'class'=>'checkGrid',
          'extraParams' => $auth['read'] + array('termlist_id'=>$args['siteNameTermListID'], 'orderby'=>'id')
        ));
      }
      data_entry_helper::$javascript .= "
jQuery(\"#".$options['ChooseParentFieldID']."\").change(function(){
  if(typeof hook_mnhnl_parent_changed != 'undefined')
    hook_mnhnl_parent_changed();
  loadFeatures(this.value, '', {initial : false}, true, true, true, true, true);
});
";
    } else if($args['locationMode']=='single'){ // no parent look up: actual name is a text entry field.
      $location_list_args=array(
          'nocache'=>true,
          'includeCodeField'=>true,
          'label'=>lang::get('LANG_CommonLocationNameLabel'),
          'NameBlankText'=>lang::get('LANG_Location_Name_Blank_Text'),
          'fieldname'=>'location:id',
          'id'=>$options['MainFieldID'],
          'columns'=>'id,name,code,location_type_id', // Only need certain columns, not geoms which would mean lots of network traffic
          'extraParams'=>array_merge(array(
              'view'=>'detail',
              'orderby'=>'name',
              'website_id'=>$args['website_id'],
              'location_type_id'=>$loctypeParam),
            $auth['read']),
          'table'=>'location',
          'template' => 'select',
          'itemTemplate' => 'select_item',
          'filterField'=>'parent_id',
          'size'=>3);
      // Idea here is to get a list of all locations in order to build drop downs.
      $responseRecords = data_entry_helper::get_population_data($location_list_args);
      if (isset($responseRecords['error'])) return $responseRecords['error'];
      iform_mnhnl_set_editable($auth, $args, $node, $responseRecords, 'conditional', $loctypeParam);
      $usedCodes = array();
      $maxCode = 0;
      $NameOpts = '';
      foreach ($responseRecords as $record){
        if($record['name']!=''){
          $item = array('selected' => (data_entry_helper::$entity_to_load['location:id'] == $record['id'] ? 'selected=\"selected\"' : ''),
                      'value' => $record['id'],
                      'caption' => htmlspecialchars(utf8_decode($record['name'])));
          $NameOpts .= data_entry_helper::mergeParamsIntoTemplate($item, $location_list_args['itemTemplate']);
          if($record['code']!=''){
            $usedCodes[] = "\"".$record['code']."\"";
            if($maxCode < $record['code']) $maxCode = $record['code'];
          }
        }
      }
      data_entry_helper::$javascript .="\nvar usedCodes = [".implode(',',$usedCodes)."];\nvar defaultCode = ".($maxCode +1).";\n";
      $retVal .= '<p>'.$options['Instructions2'].'</p>'.($options['AdminMode'] && (!isset($args['adminsCanCreate']) || !$args['adminsCanCreate']) ? '<p>'.lang::get('LANG_LocModTool_CantCreate').'</p>' : '' ).'<fieldset><legend>'.lang::get('Existing locations').'</legend>';
      if($NameOpts != ''){
        $location_list_args['items'] = str_replace(array('{value}', '{caption}', '{selected}'),
          array('', htmlentities($location_list_args['NameBlankText']), ''),
          $indicia_templates[$location_list_args['itemTemplate']]).$NameOpts;
        $retVal .= data_entry_helper::apply_template($location_list_args['template'], $location_list_args);
        if($args['SecondaryLocationTypeTerm'] != '' && $options['AdminMode']){
          $retVal .= '<p>'.lang::get("LANG_Multiple_Location_Types").'</p>';
        }
      } else
        $retVal .= '<p>'.lang::get("LANG_NoSites").'</p>';
      $retVal .= "</fieldset><label for=\"location-name\">".$options['NameLabel'].":</label> <input id=\"location-name\" name=\"location:name\" class='wide required' value=\"".htmlspecialchars(data_entry_helper::$entity_to_load['location:name'])."\"><span class=\"deh-required\">*</span><br />
      <input type='hidden' id=\"sample-location-id\" name=\"sample:location_id\" value='".data_entry_helper::$entity_to_load['sample:location_id']."' />";
    } else { // single location, filtered.
      data_entry_helper::$javascript .="indiciaData.filterMode=true;\n";
      iform_mnhnl_set_editable($auth, $args, $node, array(), 'conditional', $loctypeParam);
      $retVal .= '<p>'.$options['Instructions2'].'</p>'.($options['AdminMode'] && (!isset($args['adminsCanCreate']) || !$args['adminsCanCreate']) ? '<p>'.lang::get('LANG_LocModTool_CantCreate').'</p>' : '' );
      $filterAttrs = explode(',',$args['filterAttrs']);
      // filter attributes are assumed to be text (could extend later)
      $attrArgs = array(
       'valuetable'=>'location_attribute_value',
       'attrtable'=>'location_attribute',
       'key'=>'location_id',
       'fieldprefix'=>'locAttr',
       'extraParams'=>$auth['read'],
       'survey_id'=>$args['survey_id']
      );
      if (array_key_exists('location:id', data_entry_helper::$entity_to_load) && data_entry_helper::$entity_to_load['location:id']!="") {
        // if we have location Id to load, use it to get attribute values
        $attrArgs['id'] = data_entry_helper::$entity_to_load['location:id'];
      }
      $locationAttributes = data_entry_helper::getAttributes($attrArgs, false);
      if($args['LocationTypeTerm']=='' && isset($args['loctoolsLocTypeID'])) $args['LocationTypeTerm']=$args['loctoolsLocTypeID'];
      $primary = iform_mnhnl_getTermID($auth, 'indicia:location_types',$args['LocationTypeTerm']);
      $filterAttrs[]="Name"; // always add the location name special case to the filter list.
      $defaultsFunction="";
      $loadFunction="hook_loadFilters = function(){\n";
      $initFunctions="";
      $prevAttr=null;
      $prevFilterAttr=null;
      $prevIdx=null;
      $attrList=array();
      $includeCommune=true;
      $location_list_args=array(
          'nocache'=>true,
          'extraParams'=>array_merge(array('orderby'=>'id', 'view'=>'detail', 'website_id'=>$args['website_id'], 'location_type_id'=>$primary), $auth['read']),
          'columns'=>'id,name,parent_id', // Only need certain columns, not geoms which would mean lots of network traffic
          'table'=>'location');
      $locList = data_entry_helper::get_population_data($location_list_args); 
      if (isset($locList['error'])) return $locList['error'];
      $location_attr_list_args=array(
          'nocache'=>true,
          'extraParams'=>array_merge(array('orderby'=>'location_id', 'view'=>'list', 'website_id'=>$args['website_id'], 'location_type_id'=>$primary), $auth['read']),
          'table'=>'location_attribute_value');
      $locAttrList = data_entry_helper::get_population_data($location_attr_list_args);
      if (isset($locAttrList['error'])) return $locAttrList['error'];
      $locTextList = array();
      $locListCount = count($locList);
      $locAttrListCount = count($locAttrList);
      for($i=0, $j=0; $i< $locListCount; $i++){
        while($j<$locAttrListCount && $locAttrList[$j]['location_id']<$locList[$i]['id']) $j++;
        $locAttrTextList = array();
        while($j<$locAttrListCount && $locAttrList[$j]['location_id']==$locList[$i]['id']){
          $locAttrTextList[] = '"'.$locAttrList[$j]['location_attribute_id'].'":"'.$locAttrList[$j]['raw_value'].'"';
          $j++;
        }
        $locTextList[] = "{'id':".$locList[$i]['id'].", 'name':\"".$locList[$i]['name']."\", 'parent_id':\"".$locList[$i]['parent_id']."\", 'attrs': {".(implode(",",$locAttrTextList))."}}";
      }
      data_entry_helper::$javascript .="\nvar locations = [\n".(implode(",\n",$locTextList))."];\n";
      foreach($filterAttrs as $idx=>$filterAttr){
        $filterAttr=explode(':',$filterAttr);
        $attr = "";
        if($filterAttr[0]!="Name" && $filterAttr[0]!="Parent"){
          foreach($locationAttributes as $locationAttribute)
            if($locationAttribute['untranslatedCaption']==$filterAttr[0] ||
                ($filterAttr[0]=="Shape" && $locationAttribute['untranslatedCaption']==$filterAttr[1]))
              $attr=$locationAttribute;
          if($attr=="")
            return '<p>'.lang::get("Location Module: Could not find attribute ").$filterAttr[$filterAttr[0]=="Shape"?1:0].'</p>';
        }
        $nextIdx=$idx+1;
        while($nextIdx<count($filterAttrs)){
          $fparts = explode(':', $filterAttrs[$nextIdx]);
          if($fparts[0] != 'Parent' || $fparts[1] == "true") break;
          $nextIdx++;
        };
        // need to add functionality to tie locations to a square, even if not in use (for sites form)
      	// also this form must fill in a hidden commune field.
        switch($filterAttr[0]){
      		case "Parent": //special case, assume only one of these in a form. Not required
      			// field 1: editable true or false
      			// field 2: display warning if outside true or false
      			// field 3: location_type term
      			$parentLocTypeID = iform_mnhnl_getTermID($auth,'indicia:location_types',$filterAttr[3]);
      			// proxiedurl,featurePrefix,featureType,[geometryName],featureNS,srsName[,propertyNames]
                $protocol = explode(',', $args['locationLayerLookup']);
				data_entry_helper::$javascript .="
hook_setSref_".$idx." = function(geom){ // map projection
  // srsName should be in map projection.
  var protocol = new OpenLayers.Protocol.WFS({
      url:  '".$protocol[0]."',featurePrefix: '".$protocol[1]."',featureType: '".$protocol[2]."',geometryName:'boundary_geom',featureNS: '".$protocol[3]."',srsName: '".$protocol[4]."',version: '1.1.0',propertyNames: ['boundary_geom','name']
     ,callback: function(a1){
        if(a1.error && (typeof a1.error.success == 'undefined' || a1.error.success == false)){
          alert(\"".lang::get('LANG_ParentLookUpFailed')."\");
          return;
        }
        if(a1.features.length > 0) {
            var id = a1.features[0].fid.slice(".(strlen($protocol[2])+1).")\n";
				if($filterAttr[1]=="true"){
					data_entry_helper::$javascript .="          if(jQuery('#filterSelect".$idx."').val() == '' || // not currently filled in
              (jQuery('#filterSelect".$idx."').val() != id && confirm(\"".lang::get('LANG_PositionInDifferentParent')."\"))) {
            ParentLocationLayer.destroyFeatures();
            ParentLocationLayer.addFeatures(a1.features); // TBD check geometry system - convert?
            jQuery('#filterSelect".$idx."').val(id);
            jQuery('#".$options['ParentFieldID']."').val(id);\n";
					foreach($filterAttrs as $idx1=>$filterAttr1) // just need index, so don't explode
						if($idx1 > $idx && $idx1<count($filterAttrs)-1) // don't do name
						  data_entry_helper::$javascript .="            filterLoad".($idx1)."();\n"; // update drop downs, but leave values as they are.
					data_entry_helper::$javascript .="          }\n";
				} else {
					data_entry_helper::$javascript .="          jQuery('#".$options['ParentFieldID']."').val(id);
          jQuery('#".$options['ChooseParentFieldID']."').val(a1.features[0].attributes['name']);\n";
				}
				data_entry_helper::$javascript .="
          loadChildFeatures(id, true); // load in children onto map
        } else {\n".
($filterAttr[2]=='true'?"        alert(\"".lang::get('LANG_PositionOutsideParent')."\");\n":'').
"          jQuery('#".$options['ParentFieldID']."').val('');
          jQuery('#".($filterAttr[1]=="true" ? "filterSelect".$idx : $options['ChooseParentFieldID'])."').val('');
        }
      }
    });
  filter = new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND, filters:[
  			new OpenLayers.Filter.Spatial({type: OpenLayers.Filter.Spatial.CONTAINS,property: 'boundary_geom',value: geom}),
  			new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.EQUAL_TO, property: 'location_type_id', value: '".$parentLocTypeID."'})]});
  protocol.read({filter: filter});
};\n";
                if($filterAttr[1]=="true"){ // filterable.
                  // set up the parent list, cacheable
                  $locOptions = array(
                  		'label'=>lang::get('LANG_CommonParentLabel'),
                  		'id'=>'filterSelect'.$idx,
                  		'table'=>'location',
                  		'fieldname'=>$options['ChooseParentFieldName'],
                  		'valueField'=>'id',
                  		'captionField'=>'name',
                  		'template' => 'select',
                  		'itemTemplate' => 'select_item',
                  		'validation'=>array('required'),
                  		'columns'=>'id,name', // Only need certain columns, not geoms which would mean lots of network traffic
                  		'extraParams'=>array_merge($auth['read'],
                  				array('parent_id'=>'NULL',
                  						'view'=>'detail',
                  						'orderby'=>'name',
                  						'location_type_id'=>$parentLocTypeID,
                  						'deleted'=>'f')));
                  $locResponse = data_entry_helper::get_population_data($locOptions);
                  if (isset($locResponse['error'])) return "PARENT LOOKUP ERROR:  ".$locResponse['error'];
                  $opts = str_replace(array('{value}', '{caption}', '{selected}'),
                  		array('', lang::get('LANG_FirstChooseParentFilter'), ''),
                  		$indicia_templates[$locOptions['itemTemplate']]);
                  foreach ($locResponse as $record) {
                  	$include=false;
                  	if($locations == 'all') $include = true;
                  	else if(in_array($record["id"], $locations)) $include = true;
                  	if($include == true){
                  		$opts .= str_replace(array('{value}', '{caption}', '{selected}'),
                  				array($record[$locOptions['valueField']],
                  						htmlentities($record[$locOptions['captionField']]),
                  						isset(data_entry_helper::$entity_to_load[$options['ParentFieldName']]) ? (data_entry_helper::$entity_to_load[$options['ParentFieldName']] == $record[$locOptions['valueField']] ? 'selected=selected' : '') : ''),
                  				$indicia_templates[$locOptions['itemTemplate']]);
                  	}
                  }
                  $locOptions['items'] = $opts;
                  $retVal .= data_entry_helper::apply_template($locOptions['template'], $locOptions);
                  
                  if($options['AdminMode']){
                    // In admin mode assume can reassign to any location: admins should have access to all squares.
                    $location_list_args=array(
                              'view'=>'detail',
                              'extraParams'=>array_merge(array('orderby'=>'name', 'website_id'=>$args['website_id']), $auth['read']),
                              'location_type_id'=>$parentLocTypeID,
                              'default'=>data_entry_helper::$entity_to_load[$options['ParentFieldName']],
                              'validation' => array('required'),
                              'label'=>$options['ParentLabel'],
                              'id'=>$options['ParentFieldID'],
                              'fieldname'=>$options['ParentFieldName'],
                              'blankText'=>'');
                    $retVal .= data_entry_helper::location_select($location_list_args);
                  } else {
                  	$retVal .= "<input type='hidden' id='".$options['ParentFieldID']."' name='".$options['ParentFieldName']."' value='".(isset(data_entry_helper::$entity_to_load[$options['ParentFieldName']]) ? data_entry_helper::$entity_to_load[$options['ParentFieldName']] : "")."' />";
                  }
                  data_entry_helper::$javascript .="indiciaData.filterParent=true;
// load the counts to the end of the parent drop down list. Do only once. Equivalent to filterLoad".$idx."
jQuery('#filterSelect".$idx." option').each(function(idx, elem){
  if(elem.value=='') return;
  for(i=0, j=0; i< locations.length; i++){
    if(locations[i]['parent_id']==elem.value) j++;
  }
  if(j) elem.text=elem.text+' ('+j+')';
});
displayParent = function(zoom){
  var parent_id = jQuery('#filterSelect".$idx."').val();
  loadFeatures(parent_id, '', {initial : false}, true, false, zoom, false, false);
}
jQuery('#filterSelect".$idx."').change(function(){
  jQuery('#".$options['ParentFieldID']."').val(jQuery(this).val());
  SetFilterNewLocation();\n";
                  foreach($filterAttrs as $idx1=>$filterAttr1)
                    if($idx1 > $idx)
                      data_entry_helper::$javascript .="  filterReset".($idx1)."();\n";
                  data_entry_helper::$javascript .="  if(jQuery(this).val()!=''){\n";
					foreach($filterAttrs as $idx1=>$filterAttr1)
						if($idx1 > $idx)
						  data_entry_helper::$javascript .="    filterLoad".($idx1)."();\n";
					data_entry_helper::$javascript .="  }\n  displayParent(true);\n});\n";
					$defaultsFunction .= "  if(keepFilter){
    jQuery('#".$options['ParentFieldID']."').val(jQuery('#filterSelect".$idx."').val());
  } else {
    jQuery('#filterSelect".$idx."').val('');
  }\n";
					$prevFilterAttr=$filterAttr;
					$prevAttr=$attr;
					$prevIdx=$idx;
      			} else { // not filterable: just readonly field
      				$retVal .= '<input id="'.
      					$options['ParentFieldID'].
      					'" name="'.
      					$options['ParentFieldName'].
      					'" type="hidden" value="'.
      					(isset(data_entry_helper::$entity_to_load[$options['ParentFieldName']]) && data_entry_helper::$entity_to_load[$options['ParentFieldName']]!= "" && data_entry_helper::$entity_to_load[$options['ParentFieldName']] != null ? data_entry_helper::$entity_to_load[$options['ParentFieldName']] : '').
      					'">'.
      					'<input id="'. // this holds text name value of parent for display only.
      					$options['ChooseParentFieldID'].
      					'" name="dummy" value="" disabled="disabled" >';
					$loadFunction .= "  populate".$idx."();\n";
				  data_entry_helper::$javascript .="
$('#sample-location-id').before('<label>".lang::get('LANG_CommonParentLabel').":</label> ');
$('#".$options['ChooseParentFieldID']."').insertBefore('#sample-location-id');
$('#sample-location-id').before('<br/>');
populate".$idx." = function(){
  jQuery('#".$options['ChooseParentFieldID']."').val('');
  if(jQuery('#".$options['ParentFieldID']."').val()!='' && jQuery('#".$options['ParentFieldID']."').val() != null){
    var protocol = new OpenLayers.Protocol.WFS({
        url:  '".$protocol[0]."',featurePrefix: '".$protocol[1]."',featureType: '".$protocol[2]."',geometryName:'boundary_geom',featureNS: '".$protocol[3]."',srsName: '".$protocol[4]."',version: '1.1.0',propertyNames: ['boundary_geom','name']
       ,callback: function(a1){
          if(a1.error && (typeof a1.error.success == 'undefined' || a1.error.success == false)){
            alert(\"".lang::get('LANG_ParentLookUpFailed')."\");
          } else if(a1.features.length > 0) {
            jQuery('#".$options['ChooseParentFieldID']."').val(a1.features[0].attributes['name']);
        }}});
    var filter = new OpenLayers.Filter.FeatureId({fids: ['".$protocol[2].".'+jQuery('#".$options['ParentFieldID']."').val()]});
    protocol.read({filter: filter});
  }
};
filterLoad".$idx." = function(){
  populate".$idx."();
};
populate".$idx."();
filterReset".$idx." = function(){
  jQuery('#".$options['ChooseParentFieldID']."').val('');
};";
      			}
      			// have to extract id from fid.
				break;

      		case "Shape": //special case: geoserver shape file look up, assume only one of these in a form.
      			// 0 = "Shape"
      			// 1 = Attribute Caption, e.g. "Commune"
       			// 2 = display warning if outside list (will be set to blank)
      			// 3 = optional location type term filter
      			// 4 = buffer
      			// Note that for Commune readonly displays, the normal Commune functionality is used, e.g. in the Amphibians Squares where the Commune must be kept in line so the Amphibian Sites can use it.
      			$parentLocTypeID = $filterAttr[3]!='' ? iform_mnhnl_getTermID($auth,'indicia:location_types',$filterAttr[3]) : -1;
                // proxiedurl,featurePrefix,featureType,geometryName,featureNS,srsName,propertyNames
                if($filterAttr[1]=="Commune") $includeCommune=false;
                $protocol = explode(',', $filterAttr[1]=="Commune" ? $args['communeLayerLookup'] : $args['locationLayerLookup']);
                $retVal .= '<input id="'.$attr['id'].'" class="filterFields" name="'.$attr['fieldname'].'" type="hidden" value="'.$attr['default'].'"><label>'.$attr['caption'].':</label> <select class="required" id="filterSelect'.$idx.'"></select><span class="deh-required">*</span><br/>';
                $attrList[]=array('id'=>$attr['attributeId'],'shape'=>true);
                data_entry_helper::$javascript .="
displayShape = function(zoom){
  ParentLocationLayer.destroyFeatures();
  if(jQuery('#filterSelect".$idx."').val()=='') return;
  var protocol = new OpenLayers.Protocol.WFS({ // WFS request is to be made in the map projection
    url:  '".$protocol[0]."',featurePrefix: '".$protocol[1]."',featureType: '".$protocol[2]."',geometryName: '".$protocol[3]."',featureNS: '".$protocol[4]."',srsName: '".$protocol[5]."',version: '1.1.0',propertyNames: ['".$protocol[6]."','".$protocol[3]."']
   ,callback:function(data){
      if(data.features.length>0){ // feature is in map projection
        ParentLocationLayer.addFeatures(data.features); // TBD check geometry system - convert?
        if(zoom) ZoomToParent();
      }}});
  var filter = new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.EQUAL_TO, property: '".$protocol[6]."', value: jQuery('#filterSelect".$idx."').val()});\n".
($filterAttr[3]!=''?"  filter = new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND, filters:[filter, new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.EQUAL_TO, property: 'location_type_id', value: '".$parentLocTypeID."'})]});\n":'').
"  protocol.read({filter: filter});
}
filterLoad".$idx." = function(){
  var protocol = new OpenLayers.Protocol.WFS({
    url:  '".$protocol[0]."',featurePrefix: '".$protocol[1]."',featureType: '".$protocol[2]."',geometryName: '".$protocol[3]."',featureNS: '".$protocol[4]."',srsName: '".$protocol[5]."',version: '1.1.0',sortBy: '".$protocol[6]."',propertyNames: ['".$protocol[6].($filterAttr[3]!=''?"','location_type_id":'')."']
    ,callback:function(data){
      jQuery('#filterSelect".$idx."').empty().append('<option value=\"\">".lang::get("Please select...")."</option>');
      var names=[];
      for(var i=0; i<data.features.length; i++) names.push(data.features[i].attributes['".$protocol[6]."']);
      names.sort(); // the sort WFS does not work...
      for(var i=0; i<names.length; i++) {
        for(j=0, count=0; j< locations.length; j++){
          if(locations[j].attrs['".$attr['attributeId']."']==names[i]) {
            count++;
            locations[j].shapeFound=true;
          }
        }
        jQuery('#filterSelect".$idx."').append('<option value=\"'+names[i]+'\">'+names[i]+(count?' ('+count+')':'')+'</option>');
      }
      for(j=0; j< locations.length; j++){ // add any communes which are in the locations but not in the shape file.
        if(typeof locations[j].shapeFound == 'undefined'){
          for(i=0, count=0; i< locations.length; i++){
            if(locations[j].attrs['".$attr['attributeId']."']==locations[i].attrs['".$attr['attributeId']."']) {
              count++;
              locations[i].shapeFound=true;
            }
          }
          jQuery('#filterSelect".$idx."').append('<option value=\"'+locations[j].attrs['".$attr['attributeId']."']+'\">'+locations[j].attrs['".$attr['attributeId']."']+' ('+count+')'+'</option>');
        }
      }
      if(jQuery('#locAttr\\\\:".$attr['attributeId']."').val()!=''){
        jQuery('#filterSelect".$idx."').val(jQuery('#locAttr\\\\:".$attr['attributeId']."').val());
        displayShape(false);
      }
  }});
  protocol.read(".($filterAttr[3]!=''?"{filter: new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.EQUAL_TO, property: 'location_type_id', value: '".$parentLocTypeID."'})}":'').");
}
// this is only done once
filterLoad".$idx."();
hook_setSref_".$idx." = function(geom){ // map projection
  // srsName should be in map projection.
  var protocol = new OpenLayers.Protocol.WFS({
      url:  '".$protocol[0]."',featurePrefix: '".$protocol[1]."',featureType: '".$protocol[2]."',geometryName:'".$protocol[3]."',featureNS: '".$protocol[4]."',srsName: '".$protocol[5]."',version: '1.1.0',propertyNames: [\"".$protocol[6]."\",'".$protocol[3]."']
     ,callback: function(a1){
        if(a1.error && (typeof a1.error.success == 'undefined' || a1.error.success == false)){
          alert(\"".lang::get('LANG_'.$filterAttr[1].'LookUpFailed')."\");
          return;
        }
        if(a1.features.length > 0) {
          if(jQuery('#filterSelect".$idx."').val() == '' || // not currently filled in
              (jQuery('#filterSelect".$idx."').val() != a1.features[0].attributes[\"".$protocol[6]."\"] && confirm(\"".lang::get('LANG_PositionInDifferent'.$filterAttr[1])."\"))) {
            ParentLocationLayer.destroyFeatures();
            ParentLocationLayer.addFeatures(a1.features); // feature should be in map projection
            jQuery('#filterSelect".$idx."').val(a1.features[0].attributes[\"".$protocol[6]."\"]);
            jQuery('#locAttr\\\\:".$attr['attributeId']."').val(a1.features[0].attributes[\"".$protocol[6]."\"]);\n";
				foreach($filterAttrs as $idx1=>$filterAttr1) // just need index, so don't explode
					if($idx1 > $idx && $idx1<count($filterAttrs)-1) // don't do name
					  data_entry_helper::$javascript .="            filterLoad".($idx1)."();\n";
				data_entry_helper::$javascript .="          } // else user choose not to change
        } else {\n";
				if(!isset($args['communeLayerBuffer']) || $args['communeLayerBuffer'] == ""){ // No buffer in definition
				  data_entry_helper::$javascript .=
"          if(jQuery('#filterSelect".$idx."').val() == '') { // not currently filled in
            alert(\"".lang::get('LANG_PositionOutside'.$filterAttr[1]."_1")."\");
          } else if(!confirm(\"".lang::get('LANG_PositionOutside'.$filterAttr[1]."_2")."\")) {
            jQuery('#locAttr\\\\:".$attr['attributeId']."').val('');
            jQuery('#filterSelect".$idx."').val('');
            ParentLocationLayer.destroyFeatures();
          }\n";
                } else { // buffer set
				  data_entry_helper::$javascript .=
"          //  Get list of communes within buffer of geom
          var protocol = new OpenLayers.Protocol.WFS({
              url:  '".$protocol[0]."',featurePrefix: '".$protocol[1]."',featureType: '".$protocol[2]."',geometryName:'".$protocol[3]."',featureNS: '".$protocol[4]."',srsName: '".$protocol[5]."',version: '1.1.0',propertyNames: [\"".$protocol[6]."\",'".$protocol[3]."']
             ,callback: function(a1){
                var replace = false,
                    reset = false;
                if(a1.error && (typeof a1.error.success == 'undefined' || a1.error.success == false)){
                  alert(\"".lang::get('LANG_'.$filterAttr[1].'LookUpFailed')."\");
                  return;
                }
                if(a1.features.length == 0) {
                  if(jQuery('#filterSelect".$idx."').val() == '') { // not currently filled in
                    alert(\"".str_replace('{DISTANCE}', $args['communeLayerBuffer'], lang::get('LANG_PositionOutside'.$filterAttr[1]."_3"))."\");
                  } else if(!confirm(\"".str_replace('{DISTANCE}', $args['communeLayerBuffer'], lang::get('LANG_PositionOutside'.$filterAttr[1]."_4"))."\")) {
                    reset = true;
                  }
                } else {
                  var closest = 0;
                  if(a1.features.length >= 0) {
                    for(var i=0; i< a1.features.length; i++){
                      var distance, thisDistance = geom.distanceTo(a1.features[i].geometry, {});
                      if(i==0 || thisDistance<distance){
                        closest=i;
                        distance=thisDistance;
                      }
                    }
                  }
                  if(jQuery('#filterSelect".$idx."').val() == '') { // not currently filled in
                    if(confirm(\"".lang::get('LANG_PositionOutside'.$filterAttr[1]."_5")."\".replace(/SHAPE/g, a1.features[closest].attributes['".$protocol[6]."']))){
                      replace = true;
                    }
                  } else if(jQuery('#filterSelect".$idx."').val() == a1.features[closest].attributes[\"".$protocol[6]."\"]){
                    if(confirm(\"".lang::get('LANG_PositionOutside'.$filterAttr[1]."_6")."\".replace(/SHAPE/g, a1.features[closest].attributes['".$protocol[6]."']))){
                      replace = true;
                    } else {
                      reset = true;
                    }
                  } else { // doesn't match
                    if(confirm(\"".lang::get('LANG_PositionOutside'.$filterAttr[1]."_7")."\".replace(/SHAPE/g, a1.features[closest].attributes['".$protocol[6]."']).replace(/OLD/g, jQuery('#filterSelect".$idx."').val()))){
                      replace = true;
                    }
                  }
                }
                if(reset) {
                  jQuery('#locAttr\\\\:".$attr['attributeId']."').val('');
                  jQuery('#filterSelect".$idx."').val('');
                  ParentLocationLayer.destroyFeatures();
                } else if(replace){
                  ParentLocationLayer.destroyFeatures();
                  ParentLocationLayer.addFeatures([a1.features[closest]]); // feature should be in map projection
                  jQuery('#filterSelect".$idx."').val(a1.features[closest].attributes['".$protocol[6]."']);
                  jQuery('#locAttr\\\\:".$attr['attributeId']."').val(a1.features[closest].attributes['".$protocol[6]."']);\n";
                	
						foreach($filterAttrs as $idx1=>$filterAttr1) // just need index, so don't explode
							if($idx1 > $idx && $idx1<count($filterAttrs)-1) // don't do name
							    data_entry_helper::$javascript .="                  filterLoad".($idx1)."();\n";
						data_entry_helper::$javascript .="
                }
              }
          });
          var filter = new OpenLayers.Filter.Spatial({type: OpenLayers.Filter.Spatial.DWITHIN, property: '".$protocol[3]."', value: geom, distance: '".$args['communeLayerBuffer']."'});\n".
($filterAttr[3]!=''?
"          filter = new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND,
               filters:[filter,
		                new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.EQUAL_TO, property: 'location_type_id', value: '".$parentLocTypeID."'})]});\n":'').
"          protocol.read({filter: filter});\n";
                }
                data_entry_helper::$javascript .=
"        }
      }
  });
  var filter = new OpenLayers.Filter.Spatial({type: OpenLayers.Filter.Spatial.CONTAINS,property: '".$protocol[3]."',value: geom});\n".
($filterAttr[3]!=''?"  filter = new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND, filters:[filter, new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.EQUAL_TO, property: 'location_type_id', value: '".$parentLocTypeID."'})]});\n":'').
"  protocol.read({filter: filter});
};
jQuery('#filterSelect".$idx."').change(function(){
  jQuery('#locAttr\\\\:".$attr['attributeId']."').val(jQuery('#filterSelect".$idx."').val());
  SetFilterNewLocation();\n";
				foreach($filterAttrs as $idx1=>$filterAttr1)
					if($idx1 > $idx)
					  data_entry_helper::$javascript .="    filterReset".($idx1)."();\n";
				data_entry_helper::$javascript .="  if(jQuery(this).val()!=''){\n";
				foreach($filterAttrs as $idx1=>$filterAttr1)
					if($idx1 > $idx)
					  data_entry_helper::$javascript .="    filterLoad".($idx1)."();\n";
				data_entry_helper::$javascript .="  }\n  displayShape(true);\n});\n";
				$defaultsFunction .= "  if(keepFilter){
    jQuery('#locAttr\\\\:".$attr['attributeId']."').val(jQuery('#filterSelect".$idx."').val());
  } else {
    jQuery('#filterSelect".$idx."').val('');
  }\n";
				$loadFunction .= "  jQuery('#filterSelect".$idx."').val(jQuery('#locAttr\\\\:".$attr['attributeId']."').val());\ndisplayShape(false);\n";
				$prevFilterAttr=$filterAttr;
				$prevAttr=$attr;
				$prevIdx=$idx;
                break;

      		case "Name": //special case:
      			$retVal .= '<fieldset><legend>'.lang::get('Existing locations').'</legend><label>'.$options['FilterNameLabel'].':</label> '.
      			  '<select id="'.$options['MainFieldID'].'" name="'.$options['MainFieldName'].'" disabled="disabled">'.
      			    '<option value="">'.lang::get("None").'</option>'.
      			    (array_key_exists($options['MainFieldName'], data_entry_helper::$entity_to_load) && data_entry_helper::$entity_to_load[$options['MainFieldName']]!="" ?
      			      '<option value="'.data_entry_helper::$entity_to_load[$options['MainFieldName']].'" selected="selected">'.data_entry_helper::$entity_to_load['location:name'].'</option>' : '').
      			  '</select><br/></fieldset>';
				// when a field is changed on the drop down, all following ones are reset.
				// filterLoad function creates the drop down, based on filters. Assumes all filters are filled in - if not then sets to current value.
				// the existing locations filter drop down runs the location ID. the site name is the location name.
				data_entry_helper::$javascript .="
// when ".$options['MainFieldID']." changes the location will be loaded, including ".$options['MainFieldName']."
filterLoad".$idx." = function(){
  jQuery('#location-name').data('newValue','');
  if(jQuery('#".$options['MainFieldID']."').val() != '' && jQuery('#".$options['MainFieldID']."').val() != null)
    jQuery('#".$options['MainFieldID']."').data('storedValue',jQuery('#".$options['MainFieldID']."').val())
      .data('storedCaption',jQuery('#".$options['MainFieldID']."').find(':selected')[0].text);
  else
    jQuery('#".$options['MainFieldID']."').data('storedValue','').data('storedCaption','ERROR');
  if(";
				$condition='';
				foreach($filterAttrs as $idx1=>$filterAttr1){
				  if($idx1>=$idx) continue;
                  $filterAttr1=explode(':',$filterAttr1);
                  foreach($locationAttributes as $locationAttribute1){
                    if($filterAttr1[0]=="Parent"){
                      if($filterAttr1[1]=="true")
                        $condition .= ($condition == '' ? '' : ' || ').
                           "jQuery('#location\\\\:parent_id').val()== ''";
                    } else if($locationAttribute1['untranslatedCaption']==($filterAttr1[0]=="Shape"?$filterAttr1[1]:$filterAttr1[0])){
                      $condition .= ($condition == '' ? '' : ' || ').
                           "jQuery('#locAttr\\\\:".$locationAttribute1['attributeId']."').val()== ''";
                    }
                  }
                }
				data_entry_helper::$javascript .= $condition."){
	if(jQuery('#".$options['MainFieldID']."').data('storedValue')==null || jQuery('#".$options['MainFieldID']."').data('storedValue')=='')
      jQuery('#".$options['MainFieldID']."').empty().attr('disabled','disabled').append('<option value=\"\">".lang::get("First fill in filter options above")."</option>');
    else
      jQuery('#".$options['MainFieldID']."').empty().append('<option selected=\"selected\" value=\"'+jQuery('#".$options['MainFieldID']."').data('storedValue')+'\">'+jQuery('#".$options['MainFieldID']."').data('storedCaption')+'</option>');
    return;
  }
  parent_id=jQuery('[name=location\\\\:parent_id]');
  if(parent_id.length!=0) parent_id=parent_id.val();
  // work out new name value: ignores shape attribute and parent_id. options for drop down
  for(i=0, newName = 1, results=[]; i<locations.length; i++){
    match=true;
    for(j=0; j<location_attrs.length; j++)
      if(jQuery('#locAttr\\\\:'+location_attrs[j].id).val()!=locations[i].attrs[location_attrs[j].id]) match=false;
    if(match && parseInt(locations[i].name)>=newName) newName=parseInt(locations[i].name)+1;
    if(typeof indiciaData.filterParent != 'undefined' && locations[i].parent_id!=parent_id) match=false;
    if(match) results.push(locations[i]);
  }
  jQuery('#location-name').data('newValue',newName);
  if(jQuery('#location-name').val()=='' && (jQuery('#location-id').val()=='' || jQuery('#location-id').val()==null)) jQuery('#location-name').val(newName);
  // next work out existing sites list
  jQuery('#".$options['MainFieldID']."').empty(); // clear list
  var stored = jQuery('#".$options['MainFieldID']."').data('storedValue');
  if(results.length>0) {
    jQuery('#".$options['MainFieldID']."').removeAttr('disabled').append('<option value=\"\">".lang::get("Please select...")."</option>');
    for (var i=0;i<results.length;i++)
      jQuery('#".$options['MainFieldID']."').append('<option value=\"'+results[i].id+'\">'+results[i].name+'</option>');
    if(stored!=null && stored!=''){
      if(jQuery('#".$options['MainFieldID']."').find('option').filter('[value='+stored+']').length>0){
        jQuery('#".$options['MainFieldID']."').val(stored);
      } else {
        jQuery('#".$options['MainFieldID']."').prepend('<option selected=\"selected\" value=\"'+stored+'\">'+jQuery('#".$options['MainFieldID']."').data('storedCaption')+'</option>');
      }
    }
  } else {
    if(stored!=null && stored!='')
      jQuery('#".$options['MainFieldID']."').prepend('<option selected=\"selected\" value=\"'+stored+'\">'+jQuery('#".$options['MainFieldID']."').data('storedCaption')+'</option>');
    else
      jQuery('#".$options['MainFieldID']."').attr('disabled','disabled').empty().append('<option value=\"\">".lang::get("None available")."</option>');
  }
  var options=$('#location-name option');
  if(options.length>0){
    options.removeAttr('disabled');
    options.not(':selected').each(function(idx,elem){
      if(results.length>0) {
        for (var i=0;i<results.length;i++){
          if(results[i].name == elem.value) $(elem).attr('disabled','disabled');
        }
      }});
  }
};
filterReset".$idx." = function(){
  // filterResets also clear the main field. 
  jQuery('#".$options['MainFieldID']."').empty().attr('disabled','disabled').append('<option value=\"\">".lang::get("First fill in filter options above")."</option>');
  jQuery('#location-name').data('newValue','');
};";
      			if (array_key_exists('location:id', data_entry_helper::$entity_to_load) && data_entry_helper::$entity_to_load['location:id']!="") {
				  $initFunctions .="\nfilterLoad".$idx."(true);";
      			} else {
				  $initFunctions .="\nfilterReset".$idx."();";
      			}
				// $defaultsFunction .= "  jQuery('#location-name').val(jQuery('#location-name').data('newValue'));\n";
      			$defaultsFunction .= "  filterLoad".$idx."(true)\n";
      			$loadFunction .= "  filterLoad".$idx."(true);\n";
      			break;
      		default:
      			$attr['class'] = (isset($attr['class']) ? $attr['class']." " : "")."filterFields";
      			$ctrl = data_entry_helper::outputAttribute($attr,array('class'=>"filterFields")).
      			'<span id="filter'.$idx.'"><label class="auto-width">'.lang::get("or pick one previously used").':</label> '.
      			'<select id="filterSelect'.$idx.'" ></select></span>';
				$retVal .= str_replace('<br/>','',$ctrl).'<br />';
                $attrList[]=array('id'=>$attr['attributeId'],'shape'=>false);
				if(count($filterAttr)>1) {
				  data_entry_helper::add_resource('json');
				  data_entry_helper::add_resource('autocomplete');
				  data_entry_helper::$javascript .="
jQuery('#locAttr\\\\:".$attr['attributeId']."').autocomplete('".data_entry_helper::$base_url."/index.php/services/data/termlists_term', {
      extraParams : {
        view : 'detail',
        orderby : 'term',
        mode : 'json',
        qfield : 'term',
        auth_token: '".$auth['read']['auth_token']."',
        nonce: '".$auth['read']['nonce']."',
        termlist_id: '".$filterAttr[1]."'
      },
      max: 10000,
      mustMatch : true,
      parse: function(data) {
        var results = [];
        jQuery.each(data, function(i, item) {
          results[results.length] = {'data' : item,'result' : item.term,'value' : item.term};
        });
        return results;
      },
      formatItem: function(item) {return item.term;}
  });
jQuery('#locAttr\\\\:".$attr['attributeId']."').result(function(data,value){
  jQuery(this).change();
});";
				}
				data_entry_helper::$javascript .="
jQuery('#filterSelect".$idx."').change(function(){
  jQuery('#locAttr\\\\:".$attr['attributeId']."').data('store',jQuery('#filterSelect".$idx."').val()).val(jQuery('#filterSelect".$idx."').val());
  SetFilterNewLocation();
  if(jQuery(this).val()==''){\n";
				foreach($filterAttrs as $idx1=>$filterAttr1)
					if($idx1 > $idx) data_entry_helper::$javascript .="    filterReset".($idx1)."();\n";
				data_entry_helper::$javascript .="  } else {\n";
				foreach($filterAttrs as $idx1=>$filterAttr1)
					if($idx1 > $idx) data_entry_helper::$javascript .="    filterLoad".($idx1)."();\n";
				data_entry_helper::$javascript .="  }});\n
jQuery('#locAttr\\\\:".$attr['attributeId']."').data('store',jQuery('#locAttr\\\\:".$attr['attributeId']."').val()).change(function(){
  jQuery(this).data('store',jQuery(this).val());
  if(jQuery(this).val()=='') {
    jQuery('#filterSelect".$idx."').val('');\n";
    			foreach($filterAttrs as $idx1=>$filterAttr1)
					if($idx1 > $idx) data_entry_helper::$javascript .="    filterReset".($idx1)."();\n";
				data_entry_helper::$javascript .="    } else {
    if(jQuery('#filterSelect".$idx."').find('option').filter('[value='+jQuery(this).val()+']').length>0)
      jQuery('#filterSelect".$idx."').val(jQuery(this).val());
    else
      jQuery('#filterSelect".$idx."').val('');\n";
				foreach($filterAttrs as $idx1=>$filterAttr1)
					if($idx1 > $idx) data_entry_helper::$javascript .="    filterLoad".($idx1)."();\n";
				data_entry_helper::$javascript .="  }});\n
// loads in the drop down list for a filter attribute.
// Triggered in several places: when the filter above changes value
filterLoad".$idx." = function(){
  var match, results, results1;
  var id=jQuery('#".$options['MainFieldID']."').val();
  if(checkEditable(id=='',id))
    jQuery('#locAttr\\\\:".$attr['attributeId']."').removeAttr('disabled');
  parent_id=jQuery('[name=location\\\\:parent_id]');
  if(parent_id.length!=0) parent_id=parent_id.val();
  for(i=0, results=[]; i<locations.length; i++){
    match=true;
    if(typeof indiciaData.filterParent != 'undefined' && locations[i].parent_id!=parent_id) match=false;
    for(j=0; j<location_attrs.length; j++) {
      if(location_attrs[j].id==".$attr['attributeId'].") break;
      if(jQuery('#locAttr\\\\:'+location_attrs[j].id).val()!=locations[i].attrs[location_attrs[j].id]) match=false;
    }
    if(match) results.push(locations[i].attrs[\"".$attr['attributeId']."\"]);
  }
  jQuery('#filterSelect".$idx."').empty();
  if(results.length>0) {
    results.sort();
    for(i=1, results1=[results[0]]; i<results.length; i++)
      if(results[i]!=results[i-1]) results1.push(results[i]);
    jQuery('#filter".$idx."').show();
    jQuery('#filterSelect".$idx."').append('<option value=\"\">".lang::get("Please select...")."</option>');
    for (var i=0;i<results1.length;i++){
      // for each results, need to work out count of matching locations.
      for(var k=0, count=0; k<locations.length; k++){
        match=true;
        if(typeof indiciaData.filterParent != 'undefined' && locations[k].parent_id!=parent_id) match=false;
        for(var j=0; j<location_attrs.length; j++) {
          if(location_attrs[j].id==".$attr['attributeId'].") {
            if(locations[k].attrs[location_attrs[j].id]!=results1[i]) match=false;
            break;
          }
          if(jQuery('#locAttr\\\\:'+location_attrs[j].id).val()!=locations[k].attrs[location_attrs[j].id]) match=false;
        }
        if(match) count++;
      }
      jQuery('#filterSelect".$idx."').append('<option value=\"'+results1[i]+'\" '+(results1[i] == jQuery('#locAttr\\\\:".$attr['attributeId']."').val() ? 'selected=\"selected\"' : '')+'>'+results1[i]+' ('+count+')'+'</option>');
    }
  } else
    jQuery('#filter".$idx."').hide();
};
filterReset".$idx." = function(){
  jQuery('#locAttr\\\\:".$attr['attributeId']."').val('');
  filterLoad".$idx."();
};";
      			if (array_key_exists('location:id', data_entry_helper::$entity_to_load) && data_entry_helper::$entity_to_load['location:id']!="") {
				  $initFunctions .="\nfilterLoad".$idx."();";
      			} else {
				  $initFunctions .="\nfilterReset".$idx."();";
      			}
      			$defaultsFunction .= "  filterLoad".$idx."();\n";
				$loadFunction .= "  filterLoad".$idx."();\n";
				$prevFilterAttr=$filterAttr;
				$prevAttr=$attr;
				$prevIdx=$idx;
				break;
      	}
      }
      $creatorAttr=iform_mnhnl_getAttrID($auth, $args, 'location', 'Creator');
      global $user;
      if($creatorAttr) $defaultsFunction .= "  jQuery('#locAttr\\:".$creatorAttr."').val('".$user->name."');\n";
      $communeAttr=iform_mnhnl_getAttrID($auth, $args, 'location', 'Commune');
      if (!(isset($args['communeLayerLookup']) && $args['communeLayerLookup']!='') || !$communeAttr) $includeCommune=false;
      else $parts=explode(',',$args['communeLayerLookup']);
      data_entry_helper::$javascript .="
SetFilterNewLocation = function(){
  var id=jQuery('#".$options['MainFieldID']."').val();
  if(checkEditable(id=='',id)) return;
  setPermissionsNewSite();
  clearLocation(true,'maybe');
};
hook_set_defaults = function(keepFilter){
".$defaultsFunction."
};
".$loadFunction."
};
hook_setSref = function(geom){ // geom is in map projection.
  jQuery('#map').ajaxStop(function(event){\n";
      if($includeCommune) {
          data_entry_helper::$javascript .="
  jQuery('[name=locAttr\\:$communeAttr],[name^=locAttr\\:$communeAttr\\:]').val('');
  var communeProtocol = new OpenLayers.Protocol.WFS({
      url:  '".str_replace("{HOST}", $_SERVER['HTTP_HOST'], $parts[0])."',
      featurePrefix: '".$parts[1]."',
      featureType: '".$parts[2]."',
      geometryName:'".$parts[3]."',
      featureNS: '".$parts[4]."',
      srsName: '".$parts[5]."',
      version: '1.1.0',
      propertyNames: ['".$parts[6]."']
     ,callback: function(a1){
        if(a1.error && (typeof a1.error.success == 'undefined' || a1.error.success == false)){
          alert(\"".lang::get('LANG_CommuneLookUpFailed')."\");
          return;
        }
        if(a1.features.length > 0) {
          jQuery('[name=locAttr\\:$communeAttr],[name^=locAttr\\:$communeAttr\\:]').val(a1.features[0].attributes[\"".$parts[6]."\"]);
        } else {\n";
				if(!isset($args['communeLayerBuffer']) || $args['communeLayerBuffer'] == ""){ // No buffer in definition
				  data_entry_helper::$javascript .=
"          alert(\"".lang::get('LANG_PositionOutsideCommune_1')."\");\n";
                } else { // buffer set
				  data_entry_helper::$javascript .=
"          //  Get list of communes within buffer of geom
          var protocol = new OpenLayers.Protocol.WFS({
              url:  '".$parts[0]."',featurePrefix: '".$parts[1]."',featureType: '".$parts[2]."',geometryName:'".$parts[3]."',featureNS: '".$parts[4]."',srsName: '".$parts[5]."',version: '1.1.0',propertyNames: [\"".$parts[6]."\"]
             ,callback: function(a1){
                var replace = false,
                    reset = false;
                if(a1.error && (typeof a1.error.success == 'undefined' || a1.error.success == false)){
                  alert(\"".lang::get('LANG_CommuneLookUpFailed')."\");
                  return;
                }
                if(a1.features.length == 0) {
                  alert(\"".str_replace('{DISTANCE}', $args['communeLayerBuffer'], lang::get('LANG_PositionOutsideCommune_3'))."\");
                } else {
                  var closest = 0;
                  if(a1.features.length >= 0) {
                    for(var i=0; i< a1.features.length; i++){
                      var distance, thisDistance = geom.distanceTo(a1.features[i].geometry, {});
                      if(i==0 || thisDistance<distance){
                        closest=i;
                        distance=thisDistance;
                      }
                    }
                  }
                  alert(\"".lang::get('LANG_PositionOutside'.$filterAttr[1]."_5A")."\".replace(/SHAPE/g, a1.features[closest].attributes['".$parts[6]."']));
                  jQuery('[name=locAttr\\:$communeAttr],[name^=locAttr\\:$communeAttr\\:]').val(a1.features[closest].attributes[\"".$parts[6]."\"]);
                }
              }
          });
          var filter = new OpenLayers.Filter.Spatial({type: OpenLayers.Filter.Spatial.DWITHIN, property: '".$parts[3]."', value: geom, distance: '".$args['communeLayerBuffer']."'});
          protocol.read({filter: filter});\n";
                }
                data_entry_helper::$javascript .=
"        }
      }
  });
  var filter = new OpenLayers.Filter.Spatial({type: OpenLayers.Filter.Spatial.CONTAINS,property: '".$parts[3]."',value: geom});
  communeProtocol.read({filter: filter});\n";
      }
      foreach($filterAttrs as $idx=>$filterAttr){
        $filterAttr=explode(':',$filterAttr);
        if($filterAttr[0]=="Parent" || $filterAttr[0]=="Shape")
          data_entry_helper::$javascript .="    hook_setSref_".$idx."(geom);\n"; // map projection
      }
      $locAttrText = array();
      foreach($attrList as $filterAttr){
        $locAttrText[] ="  {'id':'".$filterAttr['id']."', 'shape':".($filterAttr['shape']?'true':'false')."}";
      }
      data_entry_helper::$javascript .="    $(this).unbind(event);\n  });\n};\nlocation_attrs = [".(implode(",\n",$locAttrText))."];";

      if($includeCommune)
        data_entry_helper::$javascript .="jQuery('[name=locAttr\\:$communeAttr],[name^=locAttr\\:$communeAttr\\:]').attr('readonly','readonly');\n";

      if(isset($args['autoGenSiteName']) && $args['autoGenSiteName']) {
        $retVal .= "<label for=\"location-name\">".$options['NameLabel'].":</label> <input type='text' id=\"location-name\" name=\"location:name\" ".($options['AdminMode'] ? "class='required integer' min='1'" : "class='required' readonly='readonly'")." value=\"".htmlspecialchars(data_entry_helper::$entity_to_load['location:name'])."\" /><span class='deh-required'>*</span><br/>";
      } else {
        if($args['siteNameTermListID']== '') {
          $retVal .= "<label for=\"location-name\">".$options['NameLabel'].":</label> <input type='text' id=\"location-name\" name=\"location:name\" class='wide required' value=\"".htmlspecialchars(data_entry_helper::$entity_to_load['location:name'])."\" /><span class='deh-required'>*</span><br/>";
        } else {
          $retVal .= data_entry_helper::select(array(
            'label'=>$options['NameLabel'], 
            'id'=>'location-name',
            'fieldname'=>'location:name',
            'table'=>'termlists_term',
            'captionField'=>'term',
            'valueField'=>'term',
            'blankText'=>'',
            'validation'=>array('required'),
            'extraParams' => $auth['read'] + array('termlist_id'=>$args['siteNameTermListID'], 'orderby'=>'id')
          ));
        }
      }
      data_entry_helper::$javascript .= $initFunctions;
      $retVal .= "<input type='hidden' id=\"sample-location-id\" name=\"sample:location_id\" value='".data_entry_helper::$entity_to_load['sample:location_id']."' />";
    }
    if(isset($args['includeLocationCode']) && $args['includeLocationCode'])
      $retVal .= "<label for=\"location-code\">".$options['CodeLabel'].":</label> <input id=\"location-code\" class=\"integer\" min=1 name=\"location:code\" value=\"".htmlspecialchars(data_entry_helper::$entity_to_load['location:code'])."\" dbCode=\"".htmlspecialchars(data_entry_helper::$entity_to_load['location:code'])."\"><br />";
    // Move any Attribute fields side by side.
    if(isset($args['removeBreakLocAttrIDs']) && $args['removeBreakLocAttrIDs']!=""){
      $removeBreakLocAttrIDs = explode(':', $args['removeBreakLocAttrIDs']);
      foreach($removeBreakLocAttrIDs as $removeBreakLocAttrID){
        data_entry_helper::$javascript .= "
jQuery('[name=locAttr\\:".$removeBreakLocAttrID."],[name^=locAttr\\:".$removeBreakLocAttrID."\\:]').css('margin-right', '20px').nextAll('br').eq(0).remove();";
      }
    }
    return $retVal;
}

function iform_mnhnl_PointGrid($auth, $args, $options) {
  if($args['usePoints']=='single' && $args['useLines']=='none' && $args['usePolygons']=='none'){
    return "";
  }
  data_entry_helper::$javascript .= "
// functions for iform_mnhnl_PointGrid
jQuery('#pointgrid').hide();
function _projToSystem(proj, convertGoogle) {
    var system = ((typeof proj != 'string') ? proj.getCode() : proj);
    if(system.substring(0,5)=='EPSG:') system = system.substring(5);
    if(convertGoogle && system=='900913') system='3857';
    return system;
}
";
  $retVal="<fieldset id=\"pointgrid\">\n<legend>".lang::get('LANG_PointsLegend')."</legend>";
  $retVal.="<table ><tbody id=\"pointgridtable\"><tr class=\"pgAddRow\">
  <td><label class=\"auto-width X\" >".lang::get('LANG_Grid_X_Label').":</label> <input type=\"text\" id=\"new-srefX\" name=\"new:srefX\" value=\"\" /></td>
  <td><label class=\"auto-width Y\" >".lang::get('LANG_Grid_Y_Label').":</label> <input type=\"text\" id=\"new-srefY\" name=\"new:srefY\" value=\"\" /></td>";
  $systemCtrl="<td style=\"display: none;\"><input class=\"pgSrefSystem\" value=\"2169\"></td>"; //TBD should come from $arg
  if(isset($options['srefs'])){
    $systemCtrl="<td><select class=\"pgSrefSystem\" >";
    $srefs = explode(';',$options['srefs']);
    data_entry_helper::$javascript .= "
setMySref = function(myRow){
  jQuery.getJSON(\"".data_entry_helper::$base_url."/index.php/services/spatial/wkt_to_sref?wkt=\"+myRow.data('WKT')+\"&system=\"+myRow.data('system')+\"&output=\"+myRow.data('output')+\"&precision=8&callback=?\",
      function(data){
        if(typeof data.error != 'undefined')
          alert(data.error);
        else {
          var parts=data.sref.split(' ');
          parts[0]=parts[0].split(',')[0]; // part 1 may have a comma at the end, so remove
          myRow.find('[name=pg\\:srefX]').val(parts[0]);
          myRow.find('[name=pg\\:srefY]').val(parts[1]);
        }
      });
}
jQuery('.pgSrefSystem').live('change', function(){
  var myRow=jQuery(this).closest('tr');
  switch(jQuery(this).val()){";
    $j=0;
    foreach($srefs as $sref){
      $parts=explode(',',$sref);
      $systemCtrl.="<option value=\"".$j."\">".$parts[1]."</option>";
      data_entry_helper::$javascript .= "
    case \"".$j."\":
      myRow.find('.X').empty().append(\"".$parts[2]." : \");
      myRow.find('.Y').empty().append(\"".$parts[3]." : \");
      myRow.data('system',\"".$parts[0]."\");
      myRow.data('output',\"".$parts[4]."\");
      break;";
      $j++;
    }
    $systemCtrl.="</select></td>";
    data_entry_helper::$javascript .= "
  }
  if(myRow.data('WKT')) setMySref(myRow);
});
jQuery('[name=pg\\:srefX],[name=pg\\:srefY]').live('change', function(){
  if(!modPointFeature.feature) return;
  var myRow=jQuery(this).closest('tr');
  if(myRow.find('[name=pg\\:srefX]').val()=='' || myRow.find('[name=pg\\:srefY]').val()=='') return;
  $.getJSON(\"".data_entry_helper::$base_url."/index.php/services/spatial/sref_to_wkt\"+
            \"?sref=\" + myRow.find('[name=pg\\:srefX]').val() + ', ' + myRow.find('[name=pg\\:srefY]').val() +
            \"&system=\" + myRow.data('system') +
            \"&mapsystem=\" + _projToSystem(SitePointLayer.map.projection, false) +
            \"&callback=?\", function(data) {
      if(typeof data.error != 'undefined')
        alert(data.error);
      else {
        var parser = new OpenLayers.Format.WKT();
        var feature = parser.read(data.mapwkt);
        // geometry data item holds the map based geometry.
        // wkt holds the WKT version of the internal indicia system
        myRow.data('geometry',feature.geometry).data('oldGeometry',feature.geometry.clone()).data('WKT',data.wkt);
        var replace;
        if(jQuery('.pgDataRow').length>1){
          var geom=[];
          jQuery('.pgDataRow').each(function(idx,elem){geom.push(jQuery(this).data('geometry'));});
          replace = new OpenLayers.Geometry.MultiPoint(geom);
        } else {
          replace=feature.geometry;
        }
        replaceGeom(modPointFeature.feature, SitePointLayer, modPointFeature, replace, true, true);
      }
    });
});
";
  }
  $retVal.=$systemCtrl;
  $retVal.="  <td><input id=\"pgNewPoint\" type=\"button\" value=\"".lang::get('LANG_AddPoint')."\"></td><td></td></tr>";
  $retVal.="</tbody></table>";
  $retVal.="</fieldset>";
  data_entry_helper::$javascript .= "
jQuery('.pgSrefSystem').change();
jQuery('.pgDeletePoint').live('click', function(){
  if(!modPointFeature.feature) return;
  var myRow=jQuery(this).closest('tr').remove();
  switch(jQuery('.pgDataRow').length){
    case 0:
      var feature = modPointFeature.feature;
      modPointFeature.unselectFeature(feature);
      SitePointLayer.destroyFeatures([feature]);
      setGeomFields();
      break;
    case 1:
      replaceGeom(modPointFeature.feature, SitePointLayer, modPointFeature,
          jQuery('.pgDataRow').data('geometry'), true, true);
      break;
    default:
      var geom=[];
      jQuery('.pgDataRow').each(function(idx,elem){geom.push(jQuery(this).data('geometry'));});
      replaceGeom(modPointFeature.feature, SitePointLayer, modPointFeature,
          new OpenLayers.Geometry.MultiPoint(geom), true, true);
      break;
  }
});
function onPopupClose(evt) {
  // 'this' is the popup.
  this.row.data('popup',null);
  SiteLabelLayer.map.removePopup(this);
  this.row=null;
  this.destroy();
}
removePopups = function() {
  jQuery('.pgDataRow').each(function(idx,elem){
    var popup = jQuery(this).data('popup');
    if(popup){
      jQuery(this).data('popup',null);
      SiteLabelLayer.map.removePopup(popup);
      popup.row=null;
      popup.destroy();
    }
  });
}
jQuery('.pgHighlightPoint').live('click', function(){
  if(!modPointFeature.feature) return;
  var myRow=jQuery(this).closest('tr');
  removePopups();
  popup = new OpenLayers.Popup.FramedCloud(\"featurePopup\",
               myRow.data('geometry').getBounds().getCenterLonLat(),
               new OpenLayers.Size(100,100),
               \"(\" + myRow.find('[name=pg\\:srefX]').val() + ', ' + myRow.find('[name=pg\\:srefY]').val() + \")\",
               null, true, onPopupClose);
  myRow.data('popup',popup);
  popup.row = myRow;
  SiteLabelLayer.map.addPopup(popup);
});
addPGPoint = function(geometry){
  removePopups();
  geometryX = reverseConvertGeom(geometry, SitePointLayer.map.projection);
  var wkt= getwkt(geometryX, true, true);
  var newRow=jQuery('<tr class=\"pgDataRow\">');
  newRow.append('<td><label class=\"auto-width X\" >".lang::get('LANG_Grid_X_Label').":</label> <input type=\"text\" name=\"pg:srefX\" value=\"\" /></td>');
  newRow.append('<td><label class=\"auto-width Y\" >".lang::get('LANG_Grid_Y_Label').":</label> <input type=\"text\" name=\"pg:srefY\" value=\"\" /></td>');
  newRow.append('".$systemCtrl."');
  newRow.append('<td><input class=\"pgDeletePoint\" type=\"button\" value=\"".lang::get('LANG_DeletePoint')."\"></td>');
  newRow.append('<td><input class=\"pgHighlightPoint\" type=\"button\" value=\"".lang::get('LANG_HighlightPoint')."\"></td>');
  newRow.data('WKT',wkt).data('geometry',geometry).data('oldGeometry',geometry.clone()).data('popup',null);
  jQuery('#pointgridtable').append(newRow);
  newRow.find('.pgSrefSystem').val(jQuery('.pgAddRow').find('.pgSrefSystem').val()).change();
};
modPGPoint = function(geometry){
  removePopups();
  if(geometry==null) geomList=[];
  else if(geometry.CLASS_NAME == \"OpenLayers.Geometry.Point\") geomList=[geometry];
  else geomList=geometry.components;
  jQuery('.pgDataRow').each(function(idx,elem){
    if(jQuery(this).data('geometry').x != jQuery(this).data('oldGeometry').x || 
        jQuery(this).data('geometry').y != jQuery(this).data('oldGeometry').y){
      // the geometry, which is the same object as the feature, has moved
      var geometryX = convertGeom(jQuery(this).data('geometry'), SitePointLayer.map.projection);
      var wkt= getwkt(geometryX, true, true);
      jQuery(this).data('WKT',wkt).data('oldGeometry',jQuery(this).data('geometry').clone());
      jQuery(this).find('.pgSrefSystem').change();
    }
    var found=false;
    for(var i=0; i< geomList.length; i++){
      if(geomList[i]==jQuery(this).data('geometry')) found=true;
    }
    if(!found) jQuery(this).remove();
  });
}
jQuery('#pgNewPoint').click(function(){
  // only add if the modPointFeature is active.
  if(!modPointFeature.active) return;
  if($('#new-srefX').val()=='' || $('#new-srefY').val()=='') return;
  $.getJSON(\"".data_entry_helper::$base_url."/index.php/services/spatial/sref_to_wkt\"+
            \"?sref=\" + $('#new-srefX').val() + ', ' + $('#new-srefY').val() +
            \"&system=\" + jQuery('.pgAddRow').data('system') +
            \"&mapsystem=\" + _projToSystem(SitePointLayer.map.projection, false) +
            \"&callback=?\", function(data) {
      if(typeof data.error != 'undefined') alert(data.error);
      else {
        var parser = new OpenLayers.Format.WKT();
        var feature = parser.read(data.mapwkt);
        addDrawnPointToSelection(feature.geometry);
        $('#new-srefX').val('');
        $('#new-srefY').val('');
      }
    });
});
populatePGrid= function(){
  clearPGrid();
  if(modPointFeature.feature){
    if(modPointFeature.feature.geometry.CLASS_NAME == \"OpenLayers.Geometry.Point\"){
      addPGPoint(modPointFeature.feature.geometry);
    } else { // multipoint
      for(var i=0; i< modPointFeature.feature.geometry.components.length; i++){
        addPGPoint(modPointFeature.feature.geometry.components[i]);
      }
    }
  }
  jQuery('.pgSrefSystem').change(); // triggers the population of the X/Y for all rows
};
clearPGrid= function(){jQuery('.pgDataRow').remove();}
";
  return $retVal;
}

function iform_mnhnl_SrefFields($auth, $args, $incLocTypeDropDown=false) {
  if($args['LocationTypeTerm']=='' && isset($args['loctoolsLocTypeID'])) $args['LocationTypeTerm']=$args['loctoolsLocTypeID'];
  $primary = iform_mnhnl_getTermID($auth, 'indicia:location_types',$args['LocationTypeTerm']);	
  data_entry_helper::$javascript .= "
// functions for iform_mnhnl_SrefFields
_setSref = function(sref){
  $('#imp-sref').val(sref);
  if (sref.indexOf(' ')!==-1) {
    var parts=sref.split(' ');
    parts[0]=parts[0].split(',')[0]; // part 1 may have a comma at the end, so remove
    $('#imp-srefX').val(parts[0]);
    $('#imp-srefY').val(parts[1]);
}};
setSref = function(geometry, sref){
  var centre = getCentroid(geometry);
  if(typeof hook_setSref != 'undefined')
    hook_setSref(centre); // centre is in map projection
  centre = reverseConvertGeom(centre, SitePointLayer.map.projection); // convert to indicia internal projection
  if(sref=='TBC'){
    jQuery.getJSON(\"".data_entry_helper::$base_url."/index.php/services/spatial/wkt_to_sref?wkt=POINT(\" + centre.x + \"  \" + centre.y + \")&system=2169&precision=8&callback=?\",
      function(data){
        if(typeof data.error != 'undefined')
          alert(data.error);
        else
          _setSref(data.sref);
       });
  } else {
    _setSref(sref);
  }
};
$('#imp-srefX,#imp-srefY').change(function() {
  if($('#imp-srefX').val()!='' && $('#imp-srefY').val()!='') {
    $('#imp-sref').val($('#imp-srefX').val() + ', ' + $('#imp-srefY').val());
    handleEnteredSref($('#imp-sref').val());
  }
});
function handleEnteredSref(value) {
  if (value!='') {
    $.getJSON(\"".data_entry_helper::$base_url."/index.php/services/spatial/sref_to_wkt\"+
            \"?sref=\" + value +
            \"&system=2169\" +
            \"&mapsystem=\" + _projToSystem(SitePointLayer.map.projection, false) +
            \"&callback=?\", function(data) {
      if(typeof data.error != 'undefined')
        alert(data.error);
      else {
        $('#centroid_geom').val(data.wkt);
        var parser = new OpenLayers.Format.WKT();
        var feature = parser.read(data.mapwkt);
        if(typeof hook_setSref != 'undefined')
          hook_setSref(feature.geometry); // in map projection.
        for(var i=0; i<SitePointLayer.features.length; i++){
          if(SitePointLayer.features[i].attributes.highlighted == true){
            replaceGeom(SitePointLayer.features[i], SitePointLayer, modPointFeature, feature.geometry, false, false);
            ZoomToSite();
            return;
          }
        }
        addAndSelectNewGeom(SitePointLayer, modPointFeature, feature.geometry, true);
        ZoomToSite();
      }
    });
  }
}
";
  //TBD sort 2169 hardcode
    $retVal .= "<input type=\"hidden\" id=\"imp-sref-system\" name=\"location:centroid_sref_system\" value=\"2169\" >
<input type=\"hidden\" id=\"imp-sref\" name=\"location:centroid_sref\" value=\"".data_entry_helper::$entity_to_load['location:centroid_sref']."\" />
<input type=\"hidden\" id=\"imp-geom\" name=\"location:centroid_geom\" value=\"".data_entry_helper::$entity_to_load['location:centroid_geom']."\" />
<input type=\"hidden\" id=\"imp-boundary-geom\" name=\"location:boundary_geom\" value=\"".data_entry_helper::$entity_to_load['location:boundary_geom']."\" />
<input type=\"hidden\" id=\"locWebsite\" name=\"locations_website:website_id\" value=\"".$args['website_id']."\" />
";
	if($args['SecondaryLocationTypeTerm']!='' && $incLocTypeDropDown) {
		$secondary = iform_mnhnl_getTermID($auth, 'indicia:location_types',$args['SecondaryLocationTypeTerm']);	
		$retVal .= "<label for=\"location_location_type_id\">".lang::get('LANG_Location_Type_Label').":</label> <select id=\"location_location_type_id\" name=\"location:location_type_id\">
    <option value=\"\"></option>
    <option value=\"$primary\">".lang::get('LANG_Location_Type_Primary')."</option>
    <option value=\"$secondary\">".lang::get('LANG_Location_Type_Secondary')."</option>
  </select><br />";
	} else
		$retVal .= "<input id=\"location_location_type_id\" type=\"hidden\" name=\"location:location_type_id\" value=\"".$primary."\" />
";
    $dummy=array('','');
    if($args['locationMode']!='multi'){
      if(isset(data_entry_helper::$entity_to_load["location:centroid_sref"]))
        $dummy = explode(',',data_entry_helper::$entity_to_load["location:centroid_sref"]);
    }
    if($args['usePoints']=='single' && $args['useLines']=='none' && $args['usePolygons']=='none'){
    	$readOnly="";
    } else $readOnly=" readonly=\"readonly\" ";
	$retVal .= "<label for=\"imp-srefX\" class=\"auto-width\" >".lang::get('LANG_Location_X_Label').":</label> <input type=\"text\" id=\"imp-srefX\" name=\"dummy:srefX\" class='required' value=\"".trim($dummy[0])."\" ".$readOnly."/>
<label for=\"imp-srefY\" class=\"auto-width prepad\" >".lang::get('LANG_Location_Y_Label').":</label> <input type=\"text\" id=\"imp-srefY\" name=\"dummy:srefY\" class='required' value=\"".trim($dummy[1])."\" ".$readOnly."/>
<span id=\"coords-text\" class=\"coords-text\">".lang::get('LANG_LatLong_Bumpf')."</span><br />
";
	return $retVal;
}

function iform_mnhnl_set_editable($auth, $args, $node, $locList, $force, $loctypeParam){
  global $user;
  if($force === true || $force === false){
    data_entry_helper::$javascript .= "\ncanEditExistingSites = ".($force ? "true" : "false").";\n";
    return;
  }
  $isAdmin = user_access('edit_permission');
  if($isAdmin) {
  	data_entry_helper::$javascript .= "\ncanEditExistingSites = true;\n";
    return;
  }
  $userIdAttr=iform_mnhnl_getAttrID($auth, $args, 'sample', 'CMS User ID');
  if (!$userIdAttr) return lang::get('This form must be used with a survey that has the CMS User ID sample attribute associated with it so records can be tagged against their creator.');
  if(count($locList)==0){
    $location_list_args=array(
          'nocache'=>true, // new locations can be added.
          'extraParams'=>array_merge(array(
              'view'=>'detail',
              'website_id'=>$args['website_id'],
              'location_type_id'=>$loctypeParam),
            $auth['read']),
          'columns'=>'id,location_type_id', // Only need certain columns, not geoms which would mean lots of network traffic
          'table'=>'location');
    // Idea here is to get a list of all locations in order to build drop downs.
    $locList = data_entry_helper::get_population_data($location_list_args); // Want id, location_type_id
    if (isset($locList['error'])) return $locList['error'];
  }
  $primary = iform_mnhnl_getTermID($auth, 'indicia:location_types',$args['LocationTypeTerm']);
  data_entry_helper::$javascript .= "SiteEditable = {";
  $locCheckList = array();
  $locEditList = array();
  foreach($locList as $location){
    if($location['location_type_id']==$primary){
      $locCheckList[] = $location['id'];
      $locEditList[$location['id']]=true;
    } else {
      data_entry_helper::$javascript .= "\"".$location['id']."\" : false,\n";
    }
  }
  $maxPerQuery = 100;
  $locCount = count($locCheckList);
  $locIdx = 0;
  $smpList = array();
  if($locCount > 0)
    while($locIdx < $locCount) {
      $locIDs = array();
      for($i = 0; $i < $maxPerQuery && $locIdx < $locCount; $i++, $locIdx++){
        $locIDs[] = $locCheckList[$smpIdx];
      }
      $sample_list_args=array(
          'nocache'=>true, // new samples can be added for existing locations.
          'extraParams'=>array_merge(array(
              'orderby'=>'id',
              'view'=>'detail',
              'website_id'=>$args['website_id'],
              'location_id'=>$locIDs),
              $auth['read']),
          'table'=>'sample');
      $smpListX = data_entry_helper::get_population_data($sample_list_args);
      if (isset($smpListX['error'])) return $smpListX['error'];
      $smpList = $smpList + $smpListX;
    }
  $smpCount = count($smpList);
  $smpIdx = 0;
  if($smpCount > 0)
   while($smpIdx < $smpCount) {
    $smpIDs = array();
  	$smpLocList = array();
  	for($i = 0; $i < $maxPerQuery && $smpIdx < $smpCount; $i++, $smpIdx++){
      $smpIDs[] = $smpList[$smpIdx]['id'];
      $smpLocList[$smpList[$smpIdx]['id']] = $smpList[$smpIdx]['location_id'];
    }
    $sample_attr_args=array(
        // 'nocache'=>true, the user who created a survey should not change.
        'extraParams'=>array_merge(array(
              'website_id'=>$args['website_id'],
              'sample_attribute_id'=>$userIdAttr,
              'sample_id'=>$smpIDs),
            $auth['read']),
        'table'=>'sample_attribute_value');
    $smpAttr = data_entry_helper::get_population_data($sample_attr_args);
    foreach($smpAttr as $attribute){
      if(!empty($attribute['id']) && $attribute['raw_value'] != $user->uid){
        $locEditList[$smpLocList[$attribute['sample_id']]]=false;
      }
    }
   }
  foreach($locEditList as $id => $state){
    data_entry_helper::$javascript .= "\"".$id."\" : ".($state ? "true" : "false").",\n";
  }
  data_entry_helper::$javascript .= "};\n";
}
function iform_mnhnl_getTermID($auth,$termListExtKey,$term){
  $termList = helper_base::get_termlist_terms($auth, $termListExtKey, array($term));
  return $termList[0]['id'];
}
function iform_mnhnl_locationmodule_lateJS($auth, $args, $tabalias, $options) {
// If entity to load is set, then we are highlighting an existing location, can't modify, but can start drawing another site.
  if(isset(data_entry_helper::$entity_to_load['location:id'])){
    data_entry_helper::$late_javascript .= "
setupButtons($('#controls'), 1);
setupButtons($('#controls'), 2);
setupButtons($('#controls'), 0);";
  };
  return '';
}
  
function iform_mnhnl_getAttr($auth, $args, $table, $caption, $qualifier=false){
  $attrOpts = array(
        'valuetable'=>$table.'_attribute_value'
       ,'attrtable'=>$table.'_attribute'
       ,'key'=>$table.'_id'
       ,'extraParams'=>$auth['read']
       ,'survey_id'=>$args['survey_id']
      );

  switch($table){
  	case 'occurrence':
  		$attrOpts['fieldprefix'] = 'occAttr';
  		break;
  	case 'sample':
  		$attrOpts['fieldprefix'] = 'smpAttr';
  		if($qualifier)
  		  $attrOpts['sample_method_id'] = $qualifier;
  		break;
  	case 'location':
  		$attrOpts['fieldprefix'] = 'locAttr';
  		break;
  	default: return false;
  }
  $myAttributes = data_entry_helper::getAttributes($attrOpts, false);
  foreach($myAttributes as $attr)
    if (strcasecmp($attr['untranslatedCaption'],$caption)==0)
      return $attr;

  return false;
}
function iform_mnhnl_locationattributes($auth, $args, $tabalias, $options) {
    $creatorAttr=iform_mnhnl_getAttrID($auth, $args, 'location', 'Creator');
    if($creatorAttr){
      data_entry_helper::$javascript .= "
jQuery('[name=locAttr:".$creatorAttr."],[name^=locAttr:".$creatorAttr.":]').removeClass('wide').attr('readonly','readonly');";
    }
    $attrArgs = array(
       'valuetable'=>'location_attribute_value',
       'attrtable'=>'location_attribute',
       'key'=>'location_id',
       'fieldprefix'=>'locAttr',
       'extraParams'=>$auth['read'],
       'survey_id'=>$args['survey_id']
      );
//    if($options['read_only']===true) $attrArgs['read_only']='read_only';
    $tabName = (isset($options['tabNameFilter']) && isset($options['tabNameFilter'])!='' ? $options['tabNameFilter'] : '');
    if (array_key_exists('location:id', data_entry_helper::$entity_to_load) && data_entry_helper::$entity_to_load['location:id']!="") {
      // if we have location Id to load, use it to get attribute values
      $attrArgs['id'] = data_entry_helper::$entity_to_load['location:id'];
    }
    $locationAttributes = data_entry_helper::getAttributes($attrArgs, false);
    $defAttrOptions = array_merge(
        array('extraParams' => array_merge($auth['read'], array('view'=>'detail')),
              'language' => iform_lang_iso_639_2($args['language'])),$options);
    $r = '';
    foreach ($locationAttributes as $attribute) {
      if (($tabName=='' && $attribute['inner_structure_block']!="Filter") ||
          strcasecmp($tabName,$attribute['inner_structure_block'])==0) {
        $opt = $defAttrOptions + get_attr_validation($attribute, $args);
        $r .= data_entry_helper::outputAttribute($attribute, $opt);
      }
    }
    return $r;
}

function iform_mnhnl_getAttrID($auth, $args, $table, $caption, $qualifier=false){
  $attr = iform_mnhnl_getAttr($auth, $args, $table, $caption, $qualifier);
  if($attr) return $attr['attributeId'];
  return false;
}

function iform_mnhnl_getReloadPath($exclusions = array('sample_id', 'occurrence_id', 'new', 'page')){
  $reload = data_entry_helper::get_reload_link_parts();
  foreach($exclusions as $exclude)
    unset($reload['params'][$exclude]);
  $reloadPath = $reload['path'];
  if(count($reload['params'])) $reloadPath .= '?'.http_build_query($reload['params']);
  return $reloadPath;
}

function iform_mnhnl_addCancelButton($interface = 'tabs'){
  switch($interface){
    case 'wizard':
        data_entry_helper::$javascript .= "\njQuery('<div class=\"ui-widget-content ui-state-default ui-corner-all indicia-button tab-cancel\"><span><a href=\"".iform_mnhnl_getReloadPath()."\">".lang::get('LANG_Cancel')."</a></span></div>').appendTo('.buttons');\n";
        break;
    default:
        data_entry_helper::$javascript .= "\njQuery('<a href=\"".iform_mnhnl_getReloadPath()."\"><input type=\"button\" name=\"cancel\" value=\"".lang::get('LANG_Cancel')."\" /></a>').appendTo('#controls > div');\n";
        break;
  }
}
